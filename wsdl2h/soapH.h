/* soapH.h
   Generated by gSOAP 2.8.51 for wsdl2h/xsd.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__String100Type_DEFINED
#define SOAP_TYPE_ns1__String100Type_DEFINED

inline void soap_default_ns1__String100Type(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__String100Type(struct soap*, const std::string *);

#define soap_ns1__String100Type2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__String100Type(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__String100Type(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 100, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__String100Type(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__String100Type soap_instantiate_std__string


#define soap_new_ns1__String100Type soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__String100Type(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__String100Type(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__String100Type(soap, p, "ns1:String100Type", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__String100Type(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__String100Type(soap, p, "ns1:String100Type", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__String100Type(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__String100Type(soap, p, "ns1:String100Type", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__String100Type(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__String100Type(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__String100Type(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__String100Type(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__String100Type(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__String100Type(struct soap *soap, std::string *p)
{
	if (soap_read_ns1__String100Type(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__String10Min10Type_DEFINED
#define SOAP_TYPE_ns1__String10Min10Type_DEFINED

inline void soap_default_ns1__String10Min10Type(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__String10Min10Type(struct soap*, const std::string *);

#define soap_ns1__String10Min10Type2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__String10Min10Type(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__String10Min10Type(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 10, 10, "[A-Z0-9]+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__String10Min10Type(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__String10Min10Type soap_instantiate_std__string


#define soap_new_ns1__String10Min10Type soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__String10Min10Type(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__String10Min10Type(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__String10Min10Type(soap, p, "ns1:String10Min10Type", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__String10Min10Type(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__String10Min10Type(soap, p, "ns1:String10Min10Type", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__String10Min10Type(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__String10Min10Type(soap, p, "ns1:String10Min10Type", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__String10Min10Type(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__String10Min10Type(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__String10Min10Type(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__String10Min10Type(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__String10Min10Type(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__String10Min10Type(struct soap *soap, std::string *p)
{
	if (soap_read_ns1__String10Min10Type(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StringUp32Min32Type_DEFINED
#define SOAP_TYPE_ns1__StringUp32Min32Type_DEFINED

inline void soap_default_ns1__StringUp32Min32Type(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__StringUp32Min32Type(struct soap*, const std::string *);

#define soap_ns1__StringUp32Min32Type2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StringUp32Min32Type(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__StringUp32Min32Type(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 32, 32, "[A-Z]+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__StringUp32Min32Type(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__StringUp32Min32Type soap_instantiate_std__string


#define soap_new_ns1__StringUp32Min32Type soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__StringUp32Min32Type(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__StringUp32Min32Type(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__StringUp32Min32Type(soap, p, "ns1:StringUp32Min32Type", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__StringUp32Min32Type(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__StringUp32Min32Type(soap, p, "ns1:StringUp32Min32Type", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StringUp32Min32Type(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__StringUp32Min32Type(soap, p, "ns1:StringUp32Min32Type", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__StringUp32Min32Type(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__StringUp32Min32Type(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__StringUp32Min32Type(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StringUp32Min32Type(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StringUp32Min32Type(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StringUp32Min32Type(struct soap *soap, std::string *p)
{
	if (soap_read_ns1__StringUp32Min32Type(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StringUp32Type_DEFINED
#define SOAP_TYPE_ns1__StringUp32Type_DEFINED

inline void soap_default_ns1__StringUp32Type(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__StringUp32Type(struct soap*, const std::string *);

#define soap_ns1__StringUp32Type2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StringUp32Type(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__StringUp32Type(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, 32, "[A-Z]+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__StringUp32Type(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__StringUp32Type soap_instantiate_std__string


#define soap_new_ns1__StringUp32Type soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__StringUp32Type(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__StringUp32Type(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__StringUp32Type(soap, p, "ns1:StringUp32Type", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__StringUp32Type(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__StringUp32Type(soap, p, "ns1:StringUp32Type", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StringUp32Type(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__StringUp32Type(soap, p, "ns1:StringUp32Type", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__StringUp32Type(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__StringUp32Type(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__StringUp32Type(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StringUp32Type(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StringUp32Type(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StringUp32Type(struct soap *soap, std::string *p)
{
	if (soap_read_ns1__StringUp32Type(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns4__ParseKeywords_DEFINED
#define SOAP_TYPE__ns4__ParseKeywords_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__ParseKeywords(struct soap*, const char*, int, const _ns4__ParseKeywords *, const char*);
SOAP_FMAC3 _ns4__ParseKeywords * SOAP_FMAC4 soap_in__ns4__ParseKeywords(struct soap*, const char*, _ns4__ParseKeywords *, const char*);
SOAP_FMAC1 _ns4__ParseKeywords * SOAP_FMAC2 soap_instantiate__ns4__ParseKeywords(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__ParseKeywords * soap_new__ns4__ParseKeywords(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns4__ParseKeywords(soap, n, NULL, NULL, NULL);
}

inline _ns4__ParseKeywords * soap_new_req__ns4__ParseKeywords(
	struct soap *soap,
	const std::vector<ns4__KeywordType *> & Keyword)
{
	_ns4__ParseKeywords *_p = soap_new__ns4__ParseKeywords(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__ParseKeywords::Keyword = Keyword;
	}
	return _p;
}

inline _ns4__ParseKeywords * soap_new_set__ns4__ParseKeywords(
	struct soap *soap,
	const std::vector<ns4__KeywordType *> & Keyword)
{
	_ns4__ParseKeywords *_p = soap_new__ns4__ParseKeywords(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns4__ParseKeywords::Keyword = Keyword;
	}
	return _p;
}

inline int soap_write__ns4__ParseKeywords(struct soap *soap, _ns4__ParseKeywords const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ParseKeywords", p->soap_type() == SOAP_TYPE__ns4__ParseKeywords ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns4__ParseKeywords(struct soap *soap, const char *URL, _ns4__ParseKeywords const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ParseKeywords", p->soap_type() == SOAP_TYPE__ns4__ParseKeywords ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns4__ParseKeywords(struct soap *soap, const char *URL, _ns4__ParseKeywords const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ParseKeywords", p->soap_type() == SOAP_TYPE__ns4__ParseKeywords ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns4__ParseKeywords * SOAP_FMAC4 soap_get__ns4__ParseKeywords(struct soap*, _ns4__ParseKeywords *, const char*, const char*);

inline int soap_read__ns4__ParseKeywords(struct soap *soap, _ns4__ParseKeywords *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns4__ParseKeywords(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns4__ParseKeywords(struct soap *soap, const char *URL, _ns4__ParseKeywords *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns4__ParseKeywords(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns4__ParseKeywords(struct soap *soap, _ns4__ParseKeywords *p)
{
	if (soap_read__ns4__ParseKeywords(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns4__KeywordType_DEFINED
#define SOAP_TYPE_ns4__KeywordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__KeywordType(struct soap*, const char*, int, const ns4__KeywordType *, const char*);
SOAP_FMAC3 ns4__KeywordType * SOAP_FMAC4 soap_in_ns4__KeywordType(struct soap*, const char*, ns4__KeywordType *, const char*);
SOAP_FMAC1 ns4__KeywordType * SOAP_FMAC2 soap_instantiate_ns4__KeywordType(struct soap*, int, const char*, const char*, size_t*);

inline ns4__KeywordType * soap_new_ns4__KeywordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__KeywordType(soap, n, NULL, NULL, NULL);
}

inline ns4__KeywordType * soap_new_req_ns4__KeywordType(
	struct soap *soap,
	const std::string& __item)
{
	ns4__KeywordType *_p = soap_new_ns4__KeywordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__KeywordType::__item = __item;
	}
	return _p;
}

inline ns4__KeywordType * soap_new_set_ns4__KeywordType(
	struct soap *soap,
	const std::string& __item)
{
	ns4__KeywordType *_p = soap_new_ns4__KeywordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__KeywordType::__item = __item;
	}
	return _p;
}

inline int soap_write_ns4__KeywordType(struct soap *soap, ns4__KeywordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:KeywordType", p->soap_type() == SOAP_TYPE_ns4__KeywordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__KeywordType(struct soap *soap, const char *URL, ns4__KeywordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:KeywordType", p->soap_type() == SOAP_TYPE_ns4__KeywordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns4__KeywordType(struct soap *soap, const char *URL, ns4__KeywordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:KeywordType", p->soap_type() == SOAP_TYPE_ns4__KeywordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns4__KeywordType * SOAP_FMAC4 soap_get_ns4__KeywordType(struct soap*, ns4__KeywordType *, const char*, const char*);

inline int soap_read_ns4__KeywordType(struct soap *soap, ns4__KeywordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns4__KeywordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__KeywordType(struct soap *soap, const char *URL, ns4__KeywordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns4__KeywordType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns4__KeywordType(struct soap *soap, ns4__KeywordType *p)
{
	if (soap_read_ns4__KeywordType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns3__MessageInfo_DEFINED
#define SOAP_TYPE__ns3__MessageInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__MessageInfo(struct soap*, const char*, int, const _ns3__MessageInfo *, const char*);
SOAP_FMAC3 _ns3__MessageInfo * SOAP_FMAC4 soap_in__ns3__MessageInfo(struct soap*, const char*, _ns3__MessageInfo *, const char*);
SOAP_FMAC1 _ns3__MessageInfo * SOAP_FMAC2 soap_instantiate__ns3__MessageInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__MessageInfo * soap_new__ns3__MessageInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__MessageInfo(soap, n, NULL, NULL, NULL);
}

inline _ns3__MessageInfo * soap_new_req__ns3__MessageInfo(
	struct soap *soap,
	ns1__EnvelopeIDType *EnvelopeID,
	ns1__EnvelopeIDType *RefEnvelopeID,
	ns1__MessageCodeType *MessageCode)
{
	_ns3__MessageInfo *_p = soap_new__ns3__MessageInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__MessageInfo::EnvelopeID = EnvelopeID;
		_p->_ns3__MessageInfo::RefEnvelopeID = RefEnvelopeID;
		_p->_ns3__MessageInfo::MessageCode = MessageCode;
	}
	return _p;
}

inline _ns3__MessageInfo * soap_new_set__ns3__MessageInfo(
	struct soap *soap,
	ns1__EnvelopeIDType *EnvelopeID,
	ns1__EnvelopeIDType *RefEnvelopeID,
	ns1__MessageCodeType *MessageCode)
{
	_ns3__MessageInfo *_p = soap_new__ns3__MessageInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__MessageInfo::EnvelopeID = EnvelopeID;
		_p->_ns3__MessageInfo::RefEnvelopeID = RefEnvelopeID;
		_p->_ns3__MessageInfo::MessageCode = MessageCode;
	}
	return _p;
}

inline int soap_write__ns3__MessageInfo(struct soap *soap, _ns3__MessageInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MessageInfo", p->soap_type() == SOAP_TYPE__ns3__MessageInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__MessageInfo(struct soap *soap, const char *URL, _ns3__MessageInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MessageInfo", p->soap_type() == SOAP_TYPE__ns3__MessageInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns3__MessageInfo(struct soap *soap, const char *URL, _ns3__MessageInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MessageInfo", p->soap_type() == SOAP_TYPE__ns3__MessageInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__MessageInfo * SOAP_FMAC4 soap_get__ns3__MessageInfo(struct soap*, _ns3__MessageInfo *, const char*, const char*);

inline int soap_read__ns3__MessageInfo(struct soap *soap, _ns3__MessageInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns3__MessageInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__MessageInfo(struct soap *soap, const char *URL, _ns3__MessageInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns3__MessageInfo(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns3__MessageInfo(struct soap *soap, _ns3__MessageInfo *p)
{
	if (soap_read__ns3__MessageInfo(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns2__Envelope_DEFINED
#define SOAP_TYPE__ns2__Envelope_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__Envelope(struct soap*, const char*, int, const _ns2__Envelope *, const char*);
SOAP_FMAC3 _ns2__Envelope * SOAP_FMAC4 soap_in__ns2__Envelope(struct soap*, const char*, _ns2__Envelope *, const char*);
SOAP_FMAC1 _ns2__Envelope * SOAP_FMAC2 soap_instantiate__ns2__Envelope(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__Envelope * soap_new__ns2__Envelope(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__Envelope(soap, n, NULL, NULL, NULL);
}

inline _ns2__Envelope * soap_new_req__ns2__Envelope(
	struct soap *soap,
	const std::string& Header,
	const std::string& Body)
{
	_ns2__Envelope *_p = soap_new__ns2__Envelope(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__Envelope::Header = Header;
		_p->_ns2__Envelope::Body = Body;
	}
	return _p;
}

inline _ns2__Envelope * soap_new_set__ns2__Envelope(
	struct soap *soap,
	const std::string& Header,
	const std::string& Body)
{
	_ns2__Envelope *_p = soap_new__ns2__Envelope(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__Envelope::Header = Header;
		_p->_ns2__Envelope::Body = Body;
	}
	return _p;
}

inline int soap_write__ns2__Envelope(struct soap *soap, _ns2__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Envelope", p->soap_type() == SOAP_TYPE__ns2__Envelope ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__Envelope(struct soap *soap, const char *URL, _ns2__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Envelope", p->soap_type() == SOAP_TYPE__ns2__Envelope ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns2__Envelope(struct soap *soap, const char *URL, _ns2__Envelope const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Envelope", p->soap_type() == SOAP_TYPE__ns2__Envelope ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__Envelope * SOAP_FMAC4 soap_get__ns2__Envelope(struct soap*, _ns2__Envelope *, const char*, const char*);

inline int soap_read__ns2__Envelope(struct soap *soap, _ns2__Envelope *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns2__Envelope(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__Envelope(struct soap *soap, const char *URL, _ns2__Envelope *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns2__Envelope(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns2__Envelope(struct soap *soap, _ns2__Envelope *p)
{
	if (soap_read__ns2__Envelope(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__BodyType_DEFINED
#define SOAP_TYPE_ns2__BodyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BodyType(struct soap*, const char*, int, const ns2__BodyType *, const char*);
SOAP_FMAC3 ns2__BodyType * SOAP_FMAC4 soap_in_ns2__BodyType(struct soap*, const char*, ns2__BodyType *, const char*);
SOAP_FMAC1 ns2__BodyType * SOAP_FMAC2 soap_instantiate_ns2__BodyType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__BodyType * soap_new_ns2__BodyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__BodyType(soap, n, NULL, NULL, NULL);
}

inline ns2__BodyType * soap_new_req_ns2__BodyType(
	struct soap *soap)
{
	ns2__BodyType *_p = soap_new_ns2__BodyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__BodyType * soap_new_set_ns2__BodyType(
	struct soap *soap,
	const std::vector<char *> & __any)
{
	ns2__BodyType *_p = soap_new_ns2__BodyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__BodyType::__any = __any;
	}
	return _p;
}

inline int soap_write_ns2__BodyType(struct soap *soap, ns2__BodyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BodyType", p->soap_type() == SOAP_TYPE_ns2__BodyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__BodyType(struct soap *soap, const char *URL, ns2__BodyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BodyType", p->soap_type() == SOAP_TYPE_ns2__BodyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__BodyType(struct soap *soap, const char *URL, ns2__BodyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:BodyType", p->soap_type() == SOAP_TYPE_ns2__BodyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__BodyType * SOAP_FMAC4 soap_get_ns2__BodyType(struct soap*, ns2__BodyType *, const char*, const char*);

inline int soap_read_ns2__BodyType(struct soap *soap, ns2__BodyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__BodyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__BodyType(struct soap *soap, const char *URL, ns2__BodyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__BodyType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__BodyType(struct soap *soap, ns2__BodyType *p)
{
	if (soap_read_ns2__BodyType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__HeaderType_DEFINED
#define SOAP_TYPE_ns2__HeaderType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HeaderType(struct soap*, const char*, int, const ns2__HeaderType *, const char*);
SOAP_FMAC3 ns2__HeaderType * SOAP_FMAC4 soap_in_ns2__HeaderType(struct soap*, const char*, ns2__HeaderType *, const char*);
SOAP_FMAC1 ns2__HeaderType * SOAP_FMAC2 soap_instantiate_ns2__HeaderType(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HeaderType * soap_new_ns2__HeaderType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__HeaderType(soap, n, NULL, NULL, NULL);
}

inline ns2__HeaderType * soap_new_req_ns2__HeaderType(
	struct soap *soap,
	_ns3__MessageInfo *ns3__MessageInfo)
{
	ns2__HeaderType *_p = soap_new_ns2__HeaderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HeaderType::ns3__MessageInfo = ns3__MessageInfo;
	}
	return _p;
}

inline ns2__HeaderType * soap_new_set_ns2__HeaderType(
	struct soap *soap,
	_ns3__MessageInfo *ns3__MessageInfo)
{
	ns2__HeaderType *_p = soap_new_ns2__HeaderType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__HeaderType::ns3__MessageInfo = ns3__MessageInfo;
	}
	return _p;
}

inline int soap_write_ns2__HeaderType(struct soap *soap, ns2__HeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HeaderType", p->soap_type() == SOAP_TYPE_ns2__HeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__HeaderType(struct soap *soap, const char *URL, ns2__HeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HeaderType", p->soap_type() == SOAP_TYPE_ns2__HeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns2__HeaderType(struct soap *soap, const char *URL, ns2__HeaderType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:HeaderType", p->soap_type() == SOAP_TYPE_ns2__HeaderType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns2__HeaderType * SOAP_FMAC4 soap_get_ns2__HeaderType(struct soap*, ns2__HeaderType *, const char*, const char*);

inline int soap_read_ns2__HeaderType(struct soap *soap, ns2__HeaderType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__HeaderType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__HeaderType(struct soap *soap, const char *URL, ns2__HeaderType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__HeaderType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__HeaderType(struct soap *soap, ns2__HeaderType *p)
{
	if (soap_read_ns2__HeaderType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MessageCodeType_DEFINED
#define SOAP_TYPE_ns1__MessageCodeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MessageCodeType(struct soap*, const char*, int, const ns1__MessageCodeType *, const char*);
SOAP_FMAC3 ns1__MessageCodeType * SOAP_FMAC4 soap_in_ns1__MessageCodeType(struct soap*, const char*, ns1__MessageCodeType *, const char*);
SOAP_FMAC1 ns1__MessageCodeType * SOAP_FMAC2 soap_instantiate_ns1__MessageCodeType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MessageCodeType * soap_new_ns1__MessageCodeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MessageCodeType(soap, n, NULL, NULL, NULL);
}

inline ns1__MessageCodeType * soap_new_req_ns1__MessageCodeType(
	struct soap *soap,
	const std::string& __item)
{
	ns1__MessageCodeType *_p = soap_new_ns1__MessageCodeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MessageCodeType::__item = __item;
	}
	return _p;
}

inline ns1__MessageCodeType * soap_new_set_ns1__MessageCodeType(
	struct soap *soap,
	const std::string& __item)
{
	ns1__MessageCodeType *_p = soap_new_ns1__MessageCodeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MessageCodeType::__item = __item;
	}
	return _p;
}

inline int soap_write_ns1__MessageCodeType(struct soap *soap, ns1__MessageCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MessageCodeType", p->soap_type() == SOAP_TYPE_ns1__MessageCodeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MessageCodeType(struct soap *soap, const char *URL, ns1__MessageCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MessageCodeType", p->soap_type() == SOAP_TYPE_ns1__MessageCodeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MessageCodeType(struct soap *soap, const char *URL, ns1__MessageCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MessageCodeType", p->soap_type() == SOAP_TYPE_ns1__MessageCodeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MessageCodeType * SOAP_FMAC4 soap_get_ns1__MessageCodeType(struct soap*, ns1__MessageCodeType *, const char*, const char*);

inline int soap_read_ns1__MessageCodeType(struct soap *soap, ns1__MessageCodeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MessageCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MessageCodeType(struct soap *soap, const char *URL, ns1__MessageCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MessageCodeType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MessageCodeType(struct soap *soap, ns1__MessageCodeType *p)
{
	if (soap_read_ns1__MessageCodeType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__EnvelopeIDType_DEFINED
#define SOAP_TYPE_ns1__EnvelopeIDType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EnvelopeIDType(struct soap*, const char*, int, const ns1__EnvelopeIDType *, const char*);
SOAP_FMAC3 ns1__EnvelopeIDType * SOAP_FMAC4 soap_in_ns1__EnvelopeIDType(struct soap*, const char*, ns1__EnvelopeIDType *, const char*);
SOAP_FMAC1 ns1__EnvelopeIDType * SOAP_FMAC2 soap_instantiate_ns1__EnvelopeIDType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EnvelopeIDType * soap_new_ns1__EnvelopeIDType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EnvelopeIDType(soap, n, NULL, NULL, NULL);
}

inline ns1__EnvelopeIDType * soap_new_req_ns1__EnvelopeIDType(
	struct soap *soap,
	const std::string& __item)
{
	ns1__EnvelopeIDType *_p = soap_new_ns1__EnvelopeIDType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EnvelopeIDType::__item = __item;
	}
	return _p;
}

inline ns1__EnvelopeIDType * soap_new_set_ns1__EnvelopeIDType(
	struct soap *soap,
	const std::string& __item)
{
	ns1__EnvelopeIDType *_p = soap_new_ns1__EnvelopeIDType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EnvelopeIDType::__item = __item;
	}
	return _p;
}

inline int soap_write_ns1__EnvelopeIDType(struct soap *soap, ns1__EnvelopeIDType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnvelopeIDType", p->soap_type() == SOAP_TYPE_ns1__EnvelopeIDType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EnvelopeIDType(struct soap *soap, const char *URL, ns1__EnvelopeIDType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnvelopeIDType", p->soap_type() == SOAP_TYPE_ns1__EnvelopeIDType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EnvelopeIDType(struct soap *soap, const char *URL, ns1__EnvelopeIDType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EnvelopeIDType", p->soap_type() == SOAP_TYPE_ns1__EnvelopeIDType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EnvelopeIDType * SOAP_FMAC4 soap_get_ns1__EnvelopeIDType(struct soap*, ns1__EnvelopeIDType *, const char*, const char*);

inline int soap_read_ns1__EnvelopeIDType(struct soap *soap, ns1__EnvelopeIDType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__EnvelopeIDType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EnvelopeIDType(struct soap *soap, const char *URL, ns1__EnvelopeIDType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__EnvelopeIDType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__EnvelopeIDType(struct soap *soap, ns1__EnvelopeIDType *p)
{
	if (soap_read_ns1__EnvelopeIDType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SOAP_ENV__HeaderType_DEFINED
#define SOAP_TYPE_SOAP_ENV__HeaderType_DEFINED

inline void soap_default_SOAP_ENV__HeaderType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__HeaderType(struct soap*, const std::string *);

#define soap_SOAP_ENV__HeaderType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__HeaderType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2SOAP_ENV__HeaderType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_SOAP_ENV__HeaderType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_SOAP_ENV__HeaderType soap_instantiate_std__string


#define soap_new_SOAP_ENV__HeaderType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__HeaderType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_SOAP_ENV__HeaderType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_SOAP_ENV__HeaderType(soap, p, "SOAP-ENV:HeaderType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__HeaderType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_SOAP_ENV__HeaderType(soap, p, "SOAP-ENV:HeaderType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__HeaderType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_SOAP_ENV__HeaderType(soap, p, "SOAP-ENV:HeaderType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_SOAP_ENV__HeaderType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_SOAP_ENV__HeaderType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_SOAP_ENV__HeaderType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__HeaderType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__HeaderType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__HeaderType(struct soap *soap, std::string *p)
{
	if (soap_read_SOAP_ENV__HeaderType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_SOAP_ENV__BodyType_DEFINED
#define SOAP_TYPE_SOAP_ENV__BodyType_DEFINED

inline void soap_default_SOAP_ENV__BodyType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__BodyType(struct soap*, const std::string *);

#define soap_SOAP_ENV__BodyType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__BodyType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2SOAP_ENV__BodyType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_SOAP_ENV__BodyType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_SOAP_ENV__BodyType soap_instantiate_std__string


#define soap_new_SOAP_ENV__BodyType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__BodyType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_SOAP_ENV__BodyType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_SOAP_ENV__BodyType(soap, p, "SOAP-ENV:BodyType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__BodyType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_SOAP_ENV__BodyType(soap, p, "SOAP-ENV:BodyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__BodyType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_SOAP_ENV__BodyType(soap, p, "SOAP-ENV:BodyType", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_SOAP_ENV__BodyType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_SOAP_ENV__BodyType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_SOAP_ENV__BodyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__BodyType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__BodyType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__BodyType(struct soap *soap, std::string *p)
{
	if (soap_read_SOAP_ENV__BodyType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_std__string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons4__KeywordType_DEFINED
#define SOAP_TYPE_PointerTons4__KeywordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__KeywordType(struct soap*, ns4__KeywordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__KeywordType(struct soap*, const char *, int, ns4__KeywordType *const*, const char *);
SOAP_FMAC3 ns4__KeywordType ** SOAP_FMAC4 soap_in_PointerTons4__KeywordType(struct soap*, const char*, ns4__KeywordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__KeywordType(struct soap*, ns4__KeywordType *const*, const char*, const char*);
SOAP_FMAC3 ns4__KeywordType ** SOAP_FMAC4 soap_get_PointerTons4__KeywordType(struct soap*, ns4__KeywordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MessageCodeType_DEFINED
#define SOAP_TYPE_PointerTons1__MessageCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MessageCodeType(struct soap*, ns1__MessageCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MessageCodeType(struct soap*, const char *, int, ns1__MessageCodeType *const*, const char *);
SOAP_FMAC3 ns1__MessageCodeType ** SOAP_FMAC4 soap_in_PointerTons1__MessageCodeType(struct soap*, const char*, ns1__MessageCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MessageCodeType(struct soap*, ns1__MessageCodeType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MessageCodeType ** SOAP_FMAC4 soap_get_PointerTons1__MessageCodeType(struct soap*, ns1__MessageCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EnvelopeIDType_DEFINED
#define SOAP_TYPE_PointerTons1__EnvelopeIDType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EnvelopeIDType(struct soap*, ns1__EnvelopeIDType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EnvelopeIDType(struct soap*, const char *, int, ns1__EnvelopeIDType *const*, const char *);
SOAP_FMAC3 ns1__EnvelopeIDType ** SOAP_FMAC4 soap_in_PointerTons1__EnvelopeIDType(struct soap*, const char*, ns1__EnvelopeIDType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EnvelopeIDType(struct soap*, ns1__EnvelopeIDType *const*, const char*, const char*);
SOAP_FMAC3 ns1__EnvelopeIDType ** SOAP_FMAC4 soap_get_PointerTons1__EnvelopeIDType(struct soap*, ns1__EnvelopeIDType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns3__MessageInfo_DEFINED
#define SOAP_TYPE_PointerTo_ns3__MessageInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__MessageInfo(struct soap*, _ns3__MessageInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__MessageInfo(struct soap*, const char *, int, _ns3__MessageInfo *const*, const char *);
SOAP_FMAC3 _ns3__MessageInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__MessageInfo(struct soap*, const char*, _ns3__MessageInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__MessageInfo(struct soap*, _ns3__MessageInfo *const*, const char*, const char*);
SOAP_FMAC3 _ns3__MessageInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__MessageInfo(struct soap*, _ns3__MessageInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__KeywordType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__KeywordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__KeywordType(struct soap*, std::vector<ns4__KeywordType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__KeywordType(struct soap*, const std::vector<ns4__KeywordType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__KeywordType(struct soap*, const char*, int, const std::vector<ns4__KeywordType *> *, const char*);
SOAP_FMAC3 std::vector<ns4__KeywordType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__KeywordType(struct soap*, const char*, std::vector<ns4__KeywordType *> *, const char*);
SOAP_FMAC1 std::vector<ns4__KeywordType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__KeywordType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__KeywordType *>  * soap_new_std__vectorTemplateOfPointerTons4__KeywordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons4__KeywordType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */

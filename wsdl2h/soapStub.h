/* soapStub.h
   Generated by gSOAP 2.8.51 for wsdl2h/xsd.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns1	"com.idurdyev.idcommerce:CommonTypes:1.0"
#define SOAP_NAMESPACE_OF_ns2	"http://schemas.xmlsoap.org/soap/envelope/"
#define SOAP_NAMESPACE_OF_ns3	"com.idurdyev.idcommerce:MessageInfo:1.0"
#define SOAP_NAMESPACE_OF_ns4	"com.idurdyev.idcommerce:ParseKeywords:1.0"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20851
# error "GSOAP VERSION 20851 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns2__HeaderType;	/* wsdl2h/xsd.h:181 */
class ns2__BodyType;	/* wsdl2h/xsd.h:184 */
class _ns2__Envelope;	/* wsdl2h/xsd.h:187 */
class _ns3__MessageInfo;	/* wsdl2h/xsd.h:190 */
class _ns4__ParseKeywords;	/* wsdl2h/xsd.h:196 */
class ns1__EnvelopeIDType;	/* wsdl2h/xsd.h:175 */
class ns1__MessageCodeType;	/* wsdl2h/xsd.h:178 */
class ns4__KeywordType;	/* wsdl2h/xsd.h:193 */

/* wsdl2h/xsd.h:181 */
#ifndef SOAP_TYPE_ns2__HeaderType
#define SOAP_TYPE_ns2__HeaderType (16)
/* complex XSD type 'ns2:HeaderType': */
class SOAP_CMAC ns2__HeaderType {
      public:
        /// Required element 'ns3:MessageInfo' of XSD type 'ns3:MessageInfo'
        _ns3__MessageInfo *ns3__MessageInfo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns2__HeaderType
        virtual int soap_type(void) const { return SOAP_TYPE_ns2__HeaderType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns2__HeaderType, default initialized and not managed by a soap context
        virtual ns2__HeaderType *soap_alloc(void) const { return SOAP_NEW(ns2__HeaderType); }
      public:
        /// Constructor with initializations
        ns2__HeaderType() : ns3__MessageInfo(), soap() { }
        virtual ~ns2__HeaderType() { }
        /// Friend allocator used by soap_new_ns2__HeaderType(struct soap*, int)
        friend SOAP_FMAC1 ns2__HeaderType * SOAP_FMAC2 soap_instantiate_ns2__HeaderType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdl2h/xsd.h:184 */
#ifndef SOAP_TYPE_ns2__BodyType
#define SOAP_TYPE_ns2__BodyType (17)
/* complex XSD type 'ns2:BodyType': */
class SOAP_CMAC ns2__BodyType {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns2__BodyType
        virtual int soap_type(void) const { return SOAP_TYPE_ns2__BodyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns2__BodyType, default initialized and not managed by a soap context
        virtual ns2__BodyType *soap_alloc(void) const { return SOAP_NEW(ns2__BodyType); }
      public:
        /// Constructor with initializations
        ns2__BodyType() : __any(), soap() { }
        virtual ~ns2__BodyType() { }
        /// Friend allocator used by soap_new_ns2__BodyType(struct soap*, int)
        friend SOAP_FMAC1 ns2__BodyType * SOAP_FMAC2 soap_instantiate_ns2__BodyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdl2h/xsd.h:187 */
#ifndef SOAP_TYPE__ns2__Envelope
#define SOAP_TYPE__ns2__Envelope (18)
/* complex XSD type 'ns2:Envelope': */
class SOAP_CMAC _ns2__Envelope {
      public:
        /// Required element 'Header' of XSD type 'SOAP-ENV:HeaderType'
        std::string Header;
        /// Required element 'Body' of XSD type 'SOAP-ENV:BodyType'
        std::string Body;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__Envelope
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__Envelope; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__Envelope, default initialized and not managed by a soap context
        virtual _ns2__Envelope *soap_alloc(void) const { return SOAP_NEW(_ns2__Envelope); }
      public:
        /// Constructor with initializations
        _ns2__Envelope() : Header(), Body(), soap() { }
        virtual ~_ns2__Envelope() { }
        /// Friend allocator used by soap_new__ns2__Envelope(struct soap*, int)
        friend SOAP_FMAC1 _ns2__Envelope * SOAP_FMAC2 soap_instantiate__ns2__Envelope(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdl2h/xsd.h:190 */
#ifndef SOAP_TYPE__ns3__MessageInfo
#define SOAP_TYPE__ns3__MessageInfo (19)
/* complex XSD type 'ns3:MessageInfo': */
class SOAP_CMAC _ns3__MessageInfo {
      public:
        /// Required element 'ns3:EnvelopeID' of XSD type 'ns1:EnvelopeIDType'
        ns1__EnvelopeIDType *EnvelopeID;
        /// Required nillable (xsi:nil when NULL) element 'ns3:RefEnvelopeID' of XSD type 'ns1:EnvelopeIDType'
        ns1__EnvelopeIDType *RefEnvelopeID;
        /// Required element 'ns3:MessageCode' of XSD type 'ns1:MessageCodeType'
        ns1__MessageCodeType *MessageCode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns3__MessageInfo
        virtual int soap_type(void) const { return SOAP_TYPE__ns3__MessageInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__MessageInfo, default initialized and not managed by a soap context
        virtual _ns3__MessageInfo *soap_alloc(void) const { return SOAP_NEW(_ns3__MessageInfo); }
      public:
        /// Constructor with initializations
        _ns3__MessageInfo() : EnvelopeID(), RefEnvelopeID(), MessageCode(), soap() { }
        virtual ~_ns3__MessageInfo() { }
        /// Friend allocator used by soap_new__ns3__MessageInfo(struct soap*, int)
        friend SOAP_FMAC1 _ns3__MessageInfo * SOAP_FMAC2 soap_instantiate__ns3__MessageInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdl2h/xsd.h:196 */
#ifndef SOAP_TYPE__ns4__ParseKeywords
#define SOAP_TYPE__ns4__ParseKeywords (21)
/* complex XSD type 'ns4:ParseKeywords': */
class SOAP_CMAC _ns4__ParseKeywords {
      public:
        /// Required element 'ns4:Keyword' of XSD type 'ns4:KeywordType'
        std::vector<ns4__KeywordType *> Keyword;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns4__ParseKeywords
        virtual int soap_type(void) const { return SOAP_TYPE__ns4__ParseKeywords; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns4__ParseKeywords, default initialized and not managed by a soap context
        virtual _ns4__ParseKeywords *soap_alloc(void) const { return SOAP_NEW(_ns4__ParseKeywords); }
      public:
        /// Constructor with initializations
        _ns4__ParseKeywords() : Keyword(), soap() { }
        virtual ~_ns4__ParseKeywords() { }
        /// Friend allocator used by soap_new__ns4__ParseKeywords(struct soap*, int)
        friend SOAP_FMAC1 _ns4__ParseKeywords * SOAP_FMAC2 soap_instantiate__ns4__ParseKeywords(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdl2h/xsd.h:175 */
#ifndef SOAP_TYPE_ns1__EnvelopeIDType
#define SOAP_TYPE_ns1__EnvelopeIDType (14)
/* simple XSD type 'ns1:EnvelopeIDType': */
class SOAP_CMAC ns1__EnvelopeIDType {
      public:
        /// Simple content of XSD type 'ns1:StringUp32Min32Type' wrapped by this struct
        std::string __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__EnvelopeIDType
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__EnvelopeIDType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__EnvelopeIDType, default initialized and not managed by a soap context
        virtual ns1__EnvelopeIDType *soap_alloc(void) const { return SOAP_NEW(ns1__EnvelopeIDType); }
      public:
        /// Constructor with initializations
        ns1__EnvelopeIDType() : __item(), soap() { }
        virtual ~ns1__EnvelopeIDType() { }
        /// Friend allocator used by soap_new_ns1__EnvelopeIDType(struct soap*, int)
        friend SOAP_FMAC1 ns1__EnvelopeIDType * SOAP_FMAC2 soap_instantiate_ns1__EnvelopeIDType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdl2h/xsd.h:178 */
#ifndef SOAP_TYPE_ns1__MessageCodeType
#define SOAP_TYPE_ns1__MessageCodeType (15)
/* simple XSD type 'ns1:MessageCodeType': */
class SOAP_CMAC ns1__MessageCodeType {
      public:
        /// Simple content of XSD type 'ns1:String10Min10Type' wrapped by this struct
        std::string __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__MessageCodeType
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__MessageCodeType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__MessageCodeType, default initialized and not managed by a soap context
        virtual ns1__MessageCodeType *soap_alloc(void) const { return SOAP_NEW(ns1__MessageCodeType); }
      public:
        /// Constructor with initializations
        ns1__MessageCodeType() : __item(), soap() { }
        virtual ~ns1__MessageCodeType() { }
        /// Friend allocator used by soap_new_ns1__MessageCodeType(struct soap*, int)
        friend SOAP_FMAC1 ns1__MessageCodeType * SOAP_FMAC2 soap_instantiate_ns1__MessageCodeType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdl2h/xsd.h:193 */
#ifndef SOAP_TYPE_ns4__KeywordType
#define SOAP_TYPE_ns4__KeywordType (20)
/* simple XSD type 'ns4:KeywordType': */
class SOAP_CMAC ns4__KeywordType {
      public:
        /// Simple content of XSD type 'ns1:String100Type' wrapped by this struct
        std::string __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns4__KeywordType
        virtual int soap_type(void) const { return SOAP_TYPE_ns4__KeywordType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns4__KeywordType, default initialized and not managed by a soap context
        virtual ns4__KeywordType *soap_alloc(void) const { return SOAP_NEW(ns4__KeywordType); }
      public:
        /// Constructor with initializations
        ns4__KeywordType() : __item(), soap() { }
        virtual ~ns4__KeywordType() { }
        /// Friend allocator used by soap_new_ns4__KeywordType(struct soap*, int)
        friend SOAP_FMAC1 ns4__KeywordType * SOAP_FMAC2 soap_instantiate_ns4__KeywordType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsdl2h/xsd.h:700 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (33)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsdl2h/xsd.h:700 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (34)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsdl2h/xsd.h:700 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (36)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsdl2h/xsd.h:700 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (39)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsdl2h/xsd.h:700 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (40)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* wsdl2h/xsd.h:102 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* wsdl2h/xsd.h:102 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* wsdl2h/xsd.h:161 */
#ifndef SOAP_TYPE_SOAP_ENV__BodyType
#define SOAP_TYPE_SOAP_ENV__BodyType (12)
typedef std::string SOAP_ENV__BodyType;
#endif

/* wsdl2h/xsd.h:164 */
#ifndef SOAP_TYPE_SOAP_ENV__HeaderType
#define SOAP_TYPE_SOAP_ENV__HeaderType (13)
typedef std::string SOAP_ENV__HeaderType;
#endif

/* wsdl2h/xsd.h:234 */
#ifndef SOAP_TYPE_ns1__StringUp32Type
#define SOAP_TYPE_ns1__StringUp32Type (22)
typedef std::string ns1__StringUp32Type;
#endif

/* wsdl2h/xsd.h:240 */
#ifndef SOAP_TYPE_ns1__StringUp32Min32Type
#define SOAP_TYPE_ns1__StringUp32Min32Type (23)
typedef std::string ns1__StringUp32Min32Type;
#endif

/* wsdl2h/xsd.h:246 */
#ifndef SOAP_TYPE_ns1__String10Min10Type
#define SOAP_TYPE_ns1__String10Min10Type (24)
typedef std::string ns1__String10Min10Type;
#endif

/* wsdl2h/xsd.h:251 */
#ifndef SOAP_TYPE_ns1__String100Type
#define SOAP_TYPE_ns1__String100Type (25)
typedef std::string ns1__String100Type;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* ns1__String100Type has binding name 'ns1__String100Type' for type 'ns1:String100Type' */
#ifndef SOAP_TYPE_ns1__String100Type
#define SOAP_TYPE_ns1__String100Type (25)
#endif

/* ns1__String10Min10Type has binding name 'ns1__String10Min10Type' for type 'ns1:String10Min10Type' */
#ifndef SOAP_TYPE_ns1__String10Min10Type
#define SOAP_TYPE_ns1__String10Min10Type (24)
#endif

/* ns1__StringUp32Min32Type has binding name 'ns1__StringUp32Min32Type' for type 'ns1:StringUp32Min32Type' */
#ifndef SOAP_TYPE_ns1__StringUp32Min32Type
#define SOAP_TYPE_ns1__StringUp32Min32Type (23)
#endif

/* ns1__StringUp32Type has binding name 'ns1__StringUp32Type' for type 'ns1:StringUp32Type' */
#ifndef SOAP_TYPE_ns1__StringUp32Type
#define SOAP_TYPE_ns1__StringUp32Type (22)
#endif

/* _ns4__ParseKeywords has binding name '_ns4__ParseKeywords' for type '' */
#ifndef SOAP_TYPE__ns4__ParseKeywords
#define SOAP_TYPE__ns4__ParseKeywords (21)
#endif

/* ns4__KeywordType has binding name 'ns4__KeywordType' for type 'ns4:KeywordType' */
#ifndef SOAP_TYPE_ns4__KeywordType
#define SOAP_TYPE_ns4__KeywordType (20)
#endif

/* _ns3__MessageInfo has binding name '_ns3__MessageInfo' for type '' */
#ifndef SOAP_TYPE__ns3__MessageInfo
#define SOAP_TYPE__ns3__MessageInfo (19)
#endif

/* _ns2__Envelope has binding name '_ns2__Envelope' for type '' */
#ifndef SOAP_TYPE__ns2__Envelope
#define SOAP_TYPE__ns2__Envelope (18)
#endif

/* ns2__BodyType has binding name 'ns2__BodyType' for type 'ns2:BodyType' */
#ifndef SOAP_TYPE_ns2__BodyType
#define SOAP_TYPE_ns2__BodyType (17)
#endif

/* ns2__HeaderType has binding name 'ns2__HeaderType' for type 'ns2:HeaderType' */
#ifndef SOAP_TYPE_ns2__HeaderType
#define SOAP_TYPE_ns2__HeaderType (16)
#endif

/* ns1__MessageCodeType has binding name 'ns1__MessageCodeType' for type 'ns1:MessageCodeType' */
#ifndef SOAP_TYPE_ns1__MessageCodeType
#define SOAP_TYPE_ns1__MessageCodeType (15)
#endif

/* ns1__EnvelopeIDType has binding name 'ns1__EnvelopeIDType' for type 'ns1:EnvelopeIDType' */
#ifndef SOAP_TYPE_ns1__EnvelopeIDType
#define SOAP_TYPE_ns1__EnvelopeIDType (14)
#endif

/* SOAP_ENV__HeaderType has binding name 'SOAP_ENV__HeaderType' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__HeaderType
#define SOAP_TYPE_SOAP_ENV__HeaderType (13)
#endif

/* SOAP_ENV__BodyType has binding name 'SOAP_ENV__BodyType' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__BodyType
#define SOAP_TYPE_SOAP_ENV__BodyType (12)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (11)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (40)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (39)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (36)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (34)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (33)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (42)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (41)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (35)
#endif

/* ns4__KeywordType * has binding name 'PointerTons4__KeywordType' for type 'ns4:KeywordType' */
#ifndef SOAP_TYPE_PointerTons4__KeywordType
#define SOAP_TYPE_PointerTons4__KeywordType (31)
#endif

/* ns1__MessageCodeType * has binding name 'PointerTons1__MessageCodeType' for type 'ns1:MessageCodeType' */
#ifndef SOAP_TYPE_PointerTons1__MessageCodeType
#define SOAP_TYPE_PointerTons1__MessageCodeType (30)
#endif

/* ns1__EnvelopeIDType * has binding name 'PointerTons1__EnvelopeIDType' for type 'ns1:EnvelopeIDType' */
#ifndef SOAP_TYPE_PointerTons1__EnvelopeIDType
#define SOAP_TYPE_PointerTons1__EnvelopeIDType (29)
#endif

/* _ns3__MessageInfo * has binding name 'PointerTo_ns3__MessageInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns3__MessageInfo
#define SOAP_TYPE_PointerTo_ns3__MessageInfo (26)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<ns4__KeywordType *>  has binding name 'std__vectorTemplateOfPointerTons4__KeywordType' for type 'ns4:KeywordType' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__KeywordType
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__KeywordType (32)
#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (28)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */

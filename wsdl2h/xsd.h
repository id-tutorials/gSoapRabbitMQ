// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* wsdl2h/xsd.h
   Generated by wsdl2h 2.8.51 from xsd/v.1.0/CommonTypes.xsd xsd/v.1.0/Envelope.xsd xsd/v.1.0/MessageInfo.xsd xsd/v.1.0/ParseKeywords.xsd and typemap.dat
   2018-01-16 06:08:02 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on wsdl2h/xsd.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "com.idurdyev.idcommerce:CommonTypes:1.0"
ns2 = "http://schemas.xmlsoap.org/soap/envelope/"
ns3 = "com.idurdyev.idcommerce:MessageInfo:1.0"
ns4 = "com.idurdyev.idcommerce:ParseKeywords:1.0"

*/

#define SOAP_NAMESPACE_OF_ns1	"com.idurdyev.idcommerce:CommonTypes:1.0"
//gsoap ns1   schema namespace:	com.idurdyev.idcommerce:CommonTypes:1.0
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns2	"http://schemas.xmlsoap.org/soap/envelope/"
//gsoap ns2   schema namespace:	http://schemas.xmlsoap.org/soap/envelope/
//gsoap ns2   schema form:	unqualified

/// <PRE><BLOCKQUOTE>
///   This is basic Message info type, contains message ids and message code
/// </BLOCKQUOTE></PRE>
#define SOAP_NAMESPACE_OF_ns3	"com.idurdyev.idcommerce:MessageInfo:1.0"
//gsoap ns3   schema namespace:	com.idurdyev.idcommerce:MessageInfo:1.0
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns4	"com.idurdyev.idcommerce:ParseKeywords:1.0"
//gsoap ns4   schema namespace:	com.idurdyev.idcommerce:ParseKeywords:1.0
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "SOAP-ENV:BodyType".
typedef std::string SOAP_ENV__BodyType;

/// Primitive built-in type "SOAP-ENV:HeaderType".
typedef std::string SOAP_ENV__HeaderType;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__EnvelopeIDType.
class ns1__EnvelopeIDType;

//  Forward declaration of class ns1__MessageCodeType.
class ns1__MessageCodeType;

//  Forward declaration of class ns2__HeaderType.
class ns2__HeaderType;

//  Forward declaration of class ns2__BodyType.
class ns2__BodyType;

//  Forward declaration of class _ns2__Envelope.
class _ns2__Envelope;

//  Forward declaration of class _ns3__MessageInfo.
class _ns3__MessageInfo;

//  Forward declaration of class ns4__KeywordType.
class ns4__KeywordType;

//  Forward declaration of class _ns4__ParseKeywords.
class _ns4__ParseKeywords;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   com.idurdyev.idcommerce:CommonTypes:1.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/soap/envelope/                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   com.idurdyev.idcommerce:MessageInfo:1.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   com.idurdyev.idcommerce:ParseKeywords:1.0                                *
 *                                                                            *
\******************************************************************************/

/// @brief "com.idurdyev.idcommerce:CommonTypes:1.0":StringUp32Type is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0 to 32.
/// Content pattern is "[A-Z]+".
typedef std::string ns1__StringUp32Type "[A-Z]+" : 32;

/// @brief "com.idurdyev.idcommerce:CommonTypes:1.0":StringUp32Min32Type is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 32 to 32.
/// Content pattern is "[A-Z]+".
typedef std::string ns1__StringUp32Min32Type "[A-Z]+" 32 : 32;

/// @brief "com.idurdyev.idcommerce:CommonTypes:1.0":String10Min10Type is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 10 to 10.
/// Content pattern is "[A-Z0-9]+".
typedef std::string ns1__String10Min10Type "[A-Z0-9]+" 10 : 10;

/// @brief "com.idurdyev.idcommerce:CommonTypes:1.0":String100Type is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 1 to 100.
typedef std::string ns1__String100Type 1 : 100;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/soap/envelope/                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   com.idurdyev.idcommerce:MessageInfo:1.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   com.idurdyev.idcommerce:ParseKeywords:1.0                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/soap/envelope/                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   com.idurdyev.idcommerce:MessageInfo:1.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   com.idurdyev.idcommerce:ParseKeywords:1.0                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   com.idurdyev.idcommerce:CommonTypes:1.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.xmlsoap.org/soap/envelope/                                *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.xmlsoap.org/soap/envelope/":HeaderType is a complexType.
///
/// class ns2__HeaderType operations:
/// - ns2__HeaderType* soap_new_ns2__HeaderType(soap*) allocate and default initialize
/// - ns2__HeaderType* soap_new_ns2__HeaderType(soap*, int num) allocate array and default initialize values
/// - ns2__HeaderType* soap_new_req_ns2__HeaderType(soap*, ...) allocate, set required members
/// - ns2__HeaderType* soap_new_set_ns2__HeaderType(soap*, ...) allocate, set all public members
/// - ns2__HeaderType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__HeaderType(soap*, ns2__HeaderType*) deserialize from a stream
/// - int soap_write_ns2__HeaderType(soap*, ns2__HeaderType*) serialize to a stream
/// - ns2__HeaderType* ns2__HeaderType::soap_dup(soap*) returns deep copy of ns2__HeaderType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__HeaderType::soap_del() deep deletes ns2__HeaderType data members, use only after ns2__HeaderType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__HeaderType
{ public:
/// <PRE><BLOCKQUOTE>
///   Information about this message, envelopeid, refid, message code
/// </BLOCKQUOTE></PRE>
/// Element reference "http://schemas.xmlsoap.org/soap/envelope/:""com.idurdyev.idcommerce:MessageInfo:1.0":MessageInfo.
    _ns3__MessageInfo*                   ns3__MessageInfo               1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://schemas.xmlsoap.org/soap/envelope/":BodyType is a complexType.
///
/// class ns2__BodyType operations:
/// - ns2__BodyType* soap_new_ns2__BodyType(soap*) allocate and default initialize
/// - ns2__BodyType* soap_new_ns2__BodyType(soap*, int num) allocate array and default initialize values
/// - ns2__BodyType* soap_new_req_ns2__BodyType(soap*, ...) allocate, set required members
/// - ns2__BodyType* soap_new_set_ns2__BodyType(soap*, ...) allocate, set all public members
/// - ns2__BodyType::soap_default(soap*) default initialize members
/// - int soap_read_ns2__BodyType(soap*, ns2__BodyType*) deserialize from a stream
/// - int soap_write_ns2__BodyType(soap*, ns2__BodyType*) serialize to a stream
/// - ns2__BodyType* ns2__BodyType::soap_dup(soap*) returns deep copy of ns2__BodyType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__BodyType::soap_del() deep deletes ns2__BodyType data members, use only after ns2__BodyType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns2__BodyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://schemas.xmlsoap.org/soap/envelope/":Envelope
/// <PRE><BLOCKQUOTE>
///   The main Envelope convert
/// </BLOCKQUOTE></PRE>
/// @brief "http://schemas.xmlsoap.org/soap/envelope/":Envelope is a complexType.
///
/// class _ns2__Envelope operations:
/// - _ns2__Envelope* soap_new__ns2__Envelope(soap*) allocate and default initialize
/// - _ns2__Envelope* soap_new__ns2__Envelope(soap*, int num) allocate array and default initialize values
/// - _ns2__Envelope* soap_new_req__ns2__Envelope(soap*, ...) allocate, set required members
/// - _ns2__Envelope* soap_new_set__ns2__Envelope(soap*, ...) allocate, set all public members
/// - _ns2__Envelope::soap_default(soap*) default initialize members
/// - int soap_read__ns2__Envelope(soap*, _ns2__Envelope*) deserialize from a stream
/// - int soap_write__ns2__Envelope(soap*, _ns2__Envelope*) serialize to a stream
/// - _ns2__Envelope* _ns2__Envelope::soap_dup(soap*) returns deep copy of _ns2__Envelope, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__Envelope::soap_del() deep deletes _ns2__Envelope data members, use only after _ns2__Envelope::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns2__Envelope
{ public:
/// Element "Header" of XSD type SOAP-ENV:HeaderType.
    SOAP_ENV__HeaderType                 Header                         1;	///< Required element.
/// Element "Body" of XSD type SOAP-ENV:BodyType.
    SOAP_ENV__BodyType                   Body                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   com.idurdyev.idcommerce:MessageInfo:1.0                                  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "com.idurdyev.idcommerce:MessageInfo:1.0":MessageInfo
/// <PRE><BLOCKQUOTE>
///   Information about this message, envelopeid, refid, message code
/// </BLOCKQUOTE></PRE>
/// @brief "com.idurdyev.idcommerce:MessageInfo:1.0":MessageInfo is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Information about this message, envelopeid, refid, message code
/// </BLOCKQUOTE></PRE>
/// class _ns3__MessageInfo operations:
/// - _ns3__MessageInfo* soap_new__ns3__MessageInfo(soap*) allocate and default initialize
/// - _ns3__MessageInfo* soap_new__ns3__MessageInfo(soap*, int num) allocate array and default initialize values
/// - _ns3__MessageInfo* soap_new_req__ns3__MessageInfo(soap*, ...) allocate, set required members
/// - _ns3__MessageInfo* soap_new_set__ns3__MessageInfo(soap*, ...) allocate, set all public members
/// - _ns3__MessageInfo::soap_default(soap*) default initialize members
/// - int soap_read__ns3__MessageInfo(soap*, _ns3__MessageInfo*) deserialize from a stream
/// - int soap_write__ns3__MessageInfo(soap*, _ns3__MessageInfo*) serialize to a stream
/// - _ns3__MessageInfo* _ns3__MessageInfo::soap_dup(soap*) returns deep copy of _ns3__MessageInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns3__MessageInfo::soap_del() deep deletes _ns3__MessageInfo data members, use only after _ns3__MessageInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns3__MessageInfo
{ public:
/// <PRE><BLOCKQUOTE>
///   This is message id unique identifier
/// </BLOCKQUOTE></PRE>
/// Element "EnvelopeID" of XSD type "com.idurdyev.idcommerce:CommonTypes:1.0":EnvelopeIDType.
    ns1__EnvelopeIDType*                 EnvelopeID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This is reference to initial message id
/// </BLOCKQUOTE></PRE>
/// Element "RefEnvelopeID" of XSD type "com.idurdyev.idcommerce:CommonTypes:1.0":EnvelopeIDType.
    ns1__EnvelopeIDType*                 RefEnvelopeID                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   This is message code
/// </BLOCKQUOTE></PRE>
/// Element "MessageCode" of XSD type "com.idurdyev.idcommerce:CommonTypes:1.0":MessageCodeType.
    ns1__MessageCodeType*                MessageCode                    1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   com.idurdyev.idcommerce:ParseKeywords:1.0                                *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "com.idurdyev.idcommerce:ParseKeywords:1.0":ParseKeywords
/// <PRE><BLOCKQUOTE>
///   ParseKeywords message, contains keywords
/// </BLOCKQUOTE></PRE>
/// @brief "com.idurdyev.idcommerce:ParseKeywords:1.0":ParseKeywords is a complexType.
///
/// class _ns4__ParseKeywords operations:
/// - _ns4__ParseKeywords* soap_new__ns4__ParseKeywords(soap*) allocate and default initialize
/// - _ns4__ParseKeywords* soap_new__ns4__ParseKeywords(soap*, int num) allocate array and default initialize values
/// - _ns4__ParseKeywords* soap_new_req__ns4__ParseKeywords(soap*, ...) allocate, set required members
/// - _ns4__ParseKeywords* soap_new_set__ns4__ParseKeywords(soap*, ...) allocate, set all public members
/// - _ns4__ParseKeywords::soap_default(soap*) default initialize members
/// - int soap_read__ns4__ParseKeywords(soap*, _ns4__ParseKeywords*) deserialize from a stream
/// - int soap_write__ns4__ParseKeywords(soap*, _ns4__ParseKeywords*) serialize to a stream
/// - _ns4__ParseKeywords* _ns4__ParseKeywords::soap_dup(soap*) returns deep copy of _ns4__ParseKeywords, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns4__ParseKeywords::soap_del() deep deletes _ns4__ParseKeywords data members, use only after _ns4__ParseKeywords::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns4__ParseKeywords
{ public:
/// <PRE><BLOCKQUOTE>
///   Keyword, string with maximum 100 chars
/// </BLOCKQUOTE></PRE>
/// Vector of ns4__KeywordType* of length 1..unbounded.
    std::vector<ns4__KeywordType*      > Keyword                        1;	///< Elements.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "com.idurdyev.idcommerce:CommonTypes:1.0":EnvelopeIDType is a complexType with simpleContent.
///
/// class ns1__EnvelopeIDType operations:
/// - ns1__EnvelopeIDType* soap_new_ns1__EnvelopeIDType(soap*) allocate and default initialize
/// - ns1__EnvelopeIDType* soap_new_ns1__EnvelopeIDType(soap*, int num) allocate array and default initialize values
/// - ns1__EnvelopeIDType* soap_new_req_ns1__EnvelopeIDType(soap*, ...) allocate, set required members
/// - ns1__EnvelopeIDType* soap_new_set_ns1__EnvelopeIDType(soap*, ...) allocate, set all public members
/// - ns1__EnvelopeIDType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EnvelopeIDType(soap*, ns1__EnvelopeIDType*) deserialize from a stream
/// - int soap_write_ns1__EnvelopeIDType(soap*, ns1__EnvelopeIDType*) serialize to a stream
/// - ns1__EnvelopeIDType* ns1__EnvelopeIDType::soap_dup(soap*) returns deep copy of ns1__EnvelopeIDType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EnvelopeIDType::soap_del() deep deletes ns1__EnvelopeIDType data members, use only after ns1__EnvelopeIDType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__EnvelopeIDType
{ public:
/// __item wraps ""com.idurdyev.idcommerce:CommonTypes:1.0":StringUp32Min32Type" simpleContent.
    ns1__StringUp32Min32Type             __item                        ;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "com.idurdyev.idcommerce:CommonTypes:1.0":MessageCodeType is a complexType with simpleContent.
///
/// class ns1__MessageCodeType operations:
/// - ns1__MessageCodeType* soap_new_ns1__MessageCodeType(soap*) allocate and default initialize
/// - ns1__MessageCodeType* soap_new_ns1__MessageCodeType(soap*, int num) allocate array and default initialize values
/// - ns1__MessageCodeType* soap_new_req_ns1__MessageCodeType(soap*, ...) allocate, set required members
/// - ns1__MessageCodeType* soap_new_set_ns1__MessageCodeType(soap*, ...) allocate, set all public members
/// - ns1__MessageCodeType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__MessageCodeType(soap*, ns1__MessageCodeType*) deserialize from a stream
/// - int soap_write_ns1__MessageCodeType(soap*, ns1__MessageCodeType*) serialize to a stream
/// - ns1__MessageCodeType* ns1__MessageCodeType::soap_dup(soap*) returns deep copy of ns1__MessageCodeType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__MessageCodeType::soap_del() deep deletes ns1__MessageCodeType data members, use only after ns1__MessageCodeType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__MessageCodeType
{ public:
/// __item wraps ""com.idurdyev.idcommerce:CommonTypes:1.0":String10Min10Type" simpleContent.
    ns1__String10Min10Type               __item                        ;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "com.idurdyev.idcommerce:ParseKeywords:1.0":KeywordType is a complexType with simpleContent.
///
/// class ns4__KeywordType operations:
/// - ns4__KeywordType* soap_new_ns4__KeywordType(soap*) allocate and default initialize
/// - ns4__KeywordType* soap_new_ns4__KeywordType(soap*, int num) allocate array and default initialize values
/// - ns4__KeywordType* soap_new_req_ns4__KeywordType(soap*, ...) allocate, set required members
/// - ns4__KeywordType* soap_new_set_ns4__KeywordType(soap*, ...) allocate, set all public members
/// - ns4__KeywordType::soap_default(soap*) default initialize members
/// - int soap_read_ns4__KeywordType(soap*, ns4__KeywordType*) deserialize from a stream
/// - int soap_write_ns4__KeywordType(soap*, ns4__KeywordType*) serialize to a stream
/// - ns4__KeywordType* ns4__KeywordType::soap_dup(soap*) returns deep copy of ns4__KeywordType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns4__KeywordType::soap_del() deep deletes ns4__KeywordType data members, use only after ns4__KeywordType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns4__KeywordType
{ public:
/// __item wraps ""com.idurdyev.idcommerce:CommonTypes:1.0":String100Type" simpleContent.
    ns1__String100Type                   __item                        ;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   com.idurdyev.idcommerce:CommonTypes:1.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   com.idurdyev.idcommerce:CommonTypes:1.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.xmlsoap.org/soap/envelope/                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.xmlsoap.org/soap/envelope/                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   com.idurdyev.idcommerce:MessageInfo:1.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   com.idurdyev.idcommerce:MessageInfo:1.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   com.idurdyev.idcommerce:ParseKeywords:1.0                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   com.idurdyev.idcommerce:ParseKeywords:1.0                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "com.idurdyev.idcommerce:CommonTypes:1.0"

@section ns2 Top-level root elements of schema "http://schemas.xmlsoap.org/soap/envelope/"

  - <ns2:Envelope> @ref _ns2__Envelope
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__Envelope(struct soap*, _ns2__Envelope*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__Envelope(struct soap*, _ns2__Envelope*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__Envelope(struct soap*, const char *URL, _ns2__Envelope*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__Envelope(struct soap*, const char *URL, _ns2__Envelope*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__Envelope(struct soap*, const char *URL, _ns2__Envelope*);
    soap_POST_recv__ns2__Envelope(struct soap*, _ns2__Envelope*);
    @endcode

@section ns3 Top-level root elements of schema "com.idurdyev.idcommerce:MessageInfo:1.0"

  - <ns3:MessageInfo> @ref _ns3__MessageInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__MessageInfo(struct soap*, _ns3__MessageInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__MessageInfo(struct soap*, _ns3__MessageInfo*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__MessageInfo(struct soap*, const char *URL, _ns3__MessageInfo*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__MessageInfo(struct soap*, const char *URL, _ns3__MessageInfo*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__MessageInfo(struct soap*, const char *URL, _ns3__MessageInfo*);
    soap_POST_recv__ns3__MessageInfo(struct soap*, _ns3__MessageInfo*);
    @endcode

@section ns4 Top-level root elements of schema "com.idurdyev.idcommerce:ParseKeywords:1.0"

  - <ns4:ParseKeywords> @ref _ns4__ParseKeywords
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns4__ParseKeywords(struct soap*, _ns4__ParseKeywords*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns4__ParseKeywords(struct soap*, _ns4__ParseKeywords*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns4__ParseKeywords(struct soap*, const char *URL, _ns4__ParseKeywords*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns4__ParseKeywords(struct soap*, const char *URL, _ns4__ParseKeywords*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns4__ParseKeywords(struct soap*, const char *URL, _ns4__ParseKeywords*);
    soap_POST_recv__ns4__ParseKeywords(struct soap*, _ns4__ParseKeywords*);
    @endcode

*/

/* End of wsdl2h/xsd.h */

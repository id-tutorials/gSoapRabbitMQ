/* soapC.cpp
   Generated by gSOAP 2.8.51 for wsdl2h/xsd.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.51 2018-01-16 06:08:08 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ns1__String100Type:
		return soap_in_ns1__String100Type(soap, NULL, NULL, "ns1:String100Type");
	case SOAP_TYPE_ns1__String10Min10Type:
		return soap_in_ns1__String10Min10Type(soap, NULL, NULL, "ns1:String10Min10Type");
	case SOAP_TYPE_ns1__StringUp32Min32Type:
		return soap_in_ns1__StringUp32Min32Type(soap, NULL, NULL, "ns1:StringUp32Min32Type");
	case SOAP_TYPE_ns1__StringUp32Type:
		return soap_in_ns1__StringUp32Type(soap, NULL, NULL, "ns1:StringUp32Type");
	case SOAP_TYPE_ns4__KeywordType:
		return soap_in_ns4__KeywordType(soap, NULL, NULL, "ns4:KeywordType");
	case SOAP_TYPE_ns2__BodyType:
		return soap_in_ns2__BodyType(soap, NULL, NULL, "ns2:BodyType");
	case SOAP_TYPE_ns2__HeaderType:
		return soap_in_ns2__HeaderType(soap, NULL, NULL, "ns2:HeaderType");
	case SOAP_TYPE_ns1__MessageCodeType:
		return soap_in_ns1__MessageCodeType(soap, NULL, NULL, "ns1:MessageCodeType");
	case SOAP_TYPE_ns1__EnvelopeIDType:
		return soap_in_ns1__EnvelopeIDType(soap, NULL, NULL, "ns1:EnvelopeIDType");
	case SOAP_TYPE_SOAP_ENV__HeaderType:
		return soap_in_SOAP_ENV__HeaderType(soap, NULL, NULL, "SOAP-ENV:HeaderType");
	case SOAP_TYPE_SOAP_ENV__BodyType:
		return soap_in_SOAP_ENV__BodyType(soap, NULL, NULL, "SOAP-ENV:BodyType");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons4__KeywordType:
		return soap_in_PointerTons4__KeywordType(soap, NULL, NULL, "ns4:KeywordType");
	case SOAP_TYPE_PointerTons1__MessageCodeType:
		return soap_in_PointerTons1__MessageCodeType(soap, NULL, NULL, "ns1:MessageCodeType");
	case SOAP_TYPE_PointerTons1__EnvelopeIDType:
		return soap_in_PointerTons1__EnvelopeIDType(soap, NULL, NULL, "ns1:EnvelopeIDType");
	case SOAP_TYPE_PointerTo_ns3__MessageInfo:
		return soap_in_PointerTo_ns3__MessageInfo(soap, NULL, NULL, "ns3:MessageInfo");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:String100Type"))
		{	*type = SOAP_TYPE_ns1__String100Type;
			return soap_in_ns1__String100Type(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:String10Min10Type"))
		{	*type = SOAP_TYPE_ns1__String10Min10Type;
			return soap_in_ns1__String10Min10Type(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:StringUp32Min32Type"))
		{	*type = SOAP_TYPE_ns1__StringUp32Min32Type;
			return soap_in_ns1__StringUp32Min32Type(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:StringUp32Type"))
		{	*type = SOAP_TYPE_ns1__StringUp32Type;
			return soap_in_ns1__StringUp32Type(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:KeywordType"))
		{	*type = SOAP_TYPE_ns4__KeywordType;
			return soap_in_ns4__KeywordType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:BodyType"))
		{	*type = SOAP_TYPE_ns2__BodyType;
			return soap_in_ns2__BodyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:HeaderType"))
		{	*type = SOAP_TYPE_ns2__HeaderType;
			return soap_in_ns2__HeaderType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MessageCodeType"))
		{	*type = SOAP_TYPE_ns1__MessageCodeType;
			return soap_in_ns1__MessageCodeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EnvelopeIDType"))
		{	*type = SOAP_TYPE_ns1__EnvelopeIDType;
			return soap_in_ns1__EnvelopeIDType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENV:HeaderType"))
		{	*type = SOAP_TYPE_SOAP_ENV__HeaderType;
			return soap_in_SOAP_ENV__HeaderType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENV:BodyType"))
		{	*type = SOAP_TYPE_SOAP_ENV__BodyType;
			return soap_in_SOAP_ENV__BodyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns4:ParseKeywords"))
		{	*type = SOAP_TYPE__ns4__ParseKeywords;
			return soap_in__ns4__ParseKeywords(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:MessageInfo"))
		{	*type = SOAP_TYPE__ns3__MessageInfo;
			return soap_in__ns3__MessageInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:Envelope"))
		{	*type = SOAP_TYPE__ns2__Envelope;
			return soap_in__ns2__Envelope(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ns1__String100Type:
		return soap_out_ns1__String100Type(soap, tag, id, (const std::string *)ptr, "ns1:String100Type");
	case SOAP_TYPE_ns1__String10Min10Type:
		return soap_out_ns1__String10Min10Type(soap, tag, id, (const std::string *)ptr, "ns1:String10Min10Type");
	case SOAP_TYPE_ns1__StringUp32Min32Type:
		return soap_out_ns1__StringUp32Min32Type(soap, tag, id, (const std::string *)ptr, "ns1:StringUp32Min32Type");
	case SOAP_TYPE_ns1__StringUp32Type:
		return soap_out_ns1__StringUp32Type(soap, tag, id, (const std::string *)ptr, "ns1:StringUp32Type");
	case SOAP_TYPE__ns4__ParseKeywords:
		return ((_ns4__ParseKeywords *)ptr)->soap_out(soap, "ns4:ParseKeywords", id, "");
	case SOAP_TYPE_ns4__KeywordType:
		return ((ns4__KeywordType *)ptr)->soap_out(soap, tag, id, "ns4:KeywordType");
	case SOAP_TYPE__ns3__MessageInfo:
		return ((_ns3__MessageInfo *)ptr)->soap_out(soap, "ns3:MessageInfo", id, "");
	case SOAP_TYPE__ns2__Envelope:
		return ((_ns2__Envelope *)ptr)->soap_out(soap, "ns2:Envelope", id, "");
	case SOAP_TYPE_ns2__BodyType:
		return ((ns2__BodyType *)ptr)->soap_out(soap, tag, id, "ns2:BodyType");
	case SOAP_TYPE_ns2__HeaderType:
		return ((ns2__HeaderType *)ptr)->soap_out(soap, tag, id, "ns2:HeaderType");
	case SOAP_TYPE_ns1__MessageCodeType:
		return ((ns1__MessageCodeType *)ptr)->soap_out(soap, tag, id, "ns1:MessageCodeType");
	case SOAP_TYPE_ns1__EnvelopeIDType:
		return ((ns1__EnvelopeIDType *)ptr)->soap_out(soap, tag, id, "ns1:EnvelopeIDType");
	case SOAP_TYPE_SOAP_ENV__HeaderType:
		return soap_out_SOAP_ENV__HeaderType(soap, tag, id, (const std::string *)ptr, "SOAP-ENV:HeaderType");
	case SOAP_TYPE_SOAP_ENV__BodyType:
		return soap_out_SOAP_ENV__BodyType(soap, tag, id, (const std::string *)ptr, "SOAP-ENV:BodyType");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons4__KeywordType:
		return soap_out_PointerTons4__KeywordType(soap, tag, id, (ns4__KeywordType *const*)ptr, "ns4:KeywordType");
	case SOAP_TYPE_PointerTons1__MessageCodeType:
		return soap_out_PointerTons1__MessageCodeType(soap, tag, id, (ns1__MessageCodeType *const*)ptr, "ns1:MessageCodeType");
	case SOAP_TYPE_PointerTons1__EnvelopeIDType:
		return soap_out_PointerTons1__EnvelopeIDType(soap, tag, id, (ns1__EnvelopeIDType *const*)ptr, "ns1:EnvelopeIDType");
	case SOAP_TYPE_PointerTo_ns3__MessageInfo:
		return soap_out_PointerTo_ns3__MessageInfo(soap, tag, id, (_ns3__MessageInfo *const*)ptr, "ns3:MessageInfo");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__String100Type:
		soap_serialize_ns1__String100Type(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__String10Min10Type:
		soap_serialize_ns1__String10Min10Type(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__StringUp32Min32Type:
		soap_serialize_ns1__StringUp32Min32Type(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__StringUp32Type:
		soap_serialize_ns1__StringUp32Type(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns4__ParseKeywords:
		((_ns4__ParseKeywords *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__KeywordType:
		((ns4__KeywordType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__MessageInfo:
		((_ns3__MessageInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns2__Envelope:
		((_ns2__Envelope *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__BodyType:
		((ns2__BodyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__HeaderType:
		((ns2__HeaderType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__MessageCodeType:
		((ns1__MessageCodeType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__EnvelopeIDType:
		((ns1__EnvelopeIDType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SOAP_ENV__HeaderType:
		soap_serialize_SOAP_ENV__HeaderType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__BodyType:
		soap_serialize_SOAP_ENV__BodyType(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_PointerTons4__KeywordType:
		soap_serialize_PointerTons4__KeywordType(soap, (ns4__KeywordType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__MessageCodeType:
		soap_serialize_PointerTons1__MessageCodeType(soap, (ns1__MessageCodeType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__EnvelopeIDType:
		soap_serialize_PointerTons1__EnvelopeIDType(soap, (ns1__EnvelopeIDType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__MessageInfo:
		soap_serialize_PointerTo_ns3__MessageInfo(soap, (_ns3__MessageInfo *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__HeaderType:
		return (void*)soap_instantiate_ns2__HeaderType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__BodyType:
		return (void*)soap_instantiate_ns2__BodyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns2__Envelope:
		return (void*)soap_instantiate__ns2__Envelope(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__MessageInfo:
		return (void*)soap_instantiate__ns3__MessageInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns4__ParseKeywords:
		return (void*)soap_instantiate__ns4__ParseKeywords(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__EnvelopeIDType:
		return (void*)soap_instantiate_ns1__EnvelopeIDType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__MessageCodeType:
		return (void*)soap_instantiate_ns1__MessageCodeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__KeywordType:
		return (void*)soap_instantiate_ns4__KeywordType(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_SOAP_ENV__BodyType:
		return (void*)soap_instantiate_SOAP_ENV__BodyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SOAP_ENV__HeaderType:
		return (void*)soap_instantiate_SOAP_ENV__HeaderType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__StringUp32Type:
		return (void*)soap_instantiate_ns1__StringUp32Type(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__StringUp32Min32Type:
		return (void*)soap_instantiate_ns1__StringUp32Min32Type(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__String10Min10Type:
		return (void*)soap_instantiate_ns1__String10Min10Type(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__String100Type:
		return (void*)soap_instantiate_ns1__String100Type(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons4__KeywordType:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons4__KeywordType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		return (void*)soap_instantiate_std__vectorTemplateOf_XML(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns2__HeaderType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns2__HeaderType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns2__HeaderType*>(p->ptr));
		break;
	case SOAP_TYPE_ns2__BodyType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns2__BodyType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns2__BodyType*>(p->ptr));
		break;
	case SOAP_TYPE__ns2__Envelope:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns2__Envelope*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns2__Envelope*>(p->ptr));
		break;
	case SOAP_TYPE__ns3__MessageInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns3__MessageInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns3__MessageInfo*>(p->ptr));
		break;
	case SOAP_TYPE__ns4__ParseKeywords:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns4__ParseKeywords*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns4__ParseKeywords*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__EnvelopeIDType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__EnvelopeIDType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__EnvelopeIDType*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__MessageCodeType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__MessageCodeType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__MessageCodeType*>(p->ptr));
		break;
	case SOAP_TYPE_ns4__KeywordType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns4__KeywordType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns4__KeywordType*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_SOAP_ENV__BodyType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_SOAP_ENV__HeaderType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__StringUp32Type:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__StringUp32Min32Type:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__String10Min10Type:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__String100Type:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons4__KeywordType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<ns4__KeywordType *> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<ns4__KeywordType *> *>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<char *> *>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<char *> *>(p->ptr));
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons4__KeywordType:
		if (t == SOAP_TYPE_ns4__KeywordType || soap_fbase(t, SOAP_TYPE_ns4__KeywordType))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns4__KeywordType *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns4__KeywordType *> *)p)[index] = *(ns4__KeywordType **)q;
		}
		break;
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		if (t == SOAP_TYPE__XML)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<char *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<char *> *)p)[index] = *(char **)q;
		}
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns2__HeaderType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns2__HeaderType type=%d location=%p object=%p\n", t, p, q));
		*(ns2__HeaderType*)p = *(ns2__HeaderType*)q;
		break;
	case SOAP_TYPE_ns2__BodyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns2__BodyType type=%d location=%p object=%p\n", t, p, q));
		*(ns2__BodyType*)p = *(ns2__BodyType*)q;
		break;
	case SOAP_TYPE__ns2__Envelope:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns2__Envelope type=%d location=%p object=%p\n", t, p, q));
		*(_ns2__Envelope*)p = *(_ns2__Envelope*)q;
		break;
	case SOAP_TYPE__ns3__MessageInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns3__MessageInfo type=%d location=%p object=%p\n", t, p, q));
		*(_ns3__MessageInfo*)p = *(_ns3__MessageInfo*)q;
		break;
	case SOAP_TYPE__ns4__ParseKeywords:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns4__ParseKeywords type=%d location=%p object=%p\n", t, p, q));
		*(_ns4__ParseKeywords*)p = *(_ns4__ParseKeywords*)q;
		break;
	case SOAP_TYPE_ns1__EnvelopeIDType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__EnvelopeIDType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__EnvelopeIDType*)p = *(ns1__EnvelopeIDType*)q;
		break;
	case SOAP_TYPE_ns1__MessageCodeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__MessageCodeType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__MessageCodeType*)p = *(ns1__MessageCodeType*)q;
		break;
	case SOAP_TYPE_ns4__KeywordType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns4__KeywordType type=%d location=%p object=%p\n", t, p, q));
		*(ns4__KeywordType*)p = *(ns4__KeywordType*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_SOAP_ENV__BodyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_SOAP_ENV__HeaderType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__StringUp32Type:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__StringUp32Min32Type:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__String10Min10Type:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__String100Type:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__String100Type(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__String100Type(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns1__String100Type), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__String100Type(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__String100Type, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 1, 100, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__String100Type, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_ns1__String100Type, SOAP_TYPE_ns1__String100Type, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__String100Type(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_ns1__String100Type(soap, tag ? tag : "ns1:String100Type", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__String100Type(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__String100Type(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__String10Min10Type(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__String10Min10Type(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns1__String10Min10Type), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__String10Min10Type(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__String10Min10Type, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 10, 10, "[A-Z0-9]+")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__String10Min10Type, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_ns1__String10Min10Type, SOAP_TYPE_ns1__String10Min10Type, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__String10Min10Type(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_ns1__String10Min10Type(soap, tag ? tag : "ns1:String10Min10Type", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__String10Min10Type(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__String10Min10Type(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__StringUp32Min32Type(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StringUp32Min32Type(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns1__StringUp32Min32Type), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__StringUp32Min32Type(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__StringUp32Min32Type, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 32, 32, "[A-Z]+")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__StringUp32Min32Type, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_ns1__StringUp32Min32Type, SOAP_TYPE_ns1__StringUp32Min32Type, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__StringUp32Min32Type(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_ns1__StringUp32Min32Type(soap, tag ? tag : "ns1:StringUp32Min32Type", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__StringUp32Min32Type(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__StringUp32Min32Type(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__StringUp32Type(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StringUp32Type(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns1__StringUp32Type), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__StringUp32Type(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__StringUp32Type, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, 32, "[A-Z]+")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_ns1__StringUp32Type, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_ns1__StringUp32Type, SOAP_TYPE_ns1__StringUp32Type, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__StringUp32Type(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_ns1__StringUp32Type(soap, tag ? tag : "ns1:StringUp32Type", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__StringUp32Type(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__StringUp32Type(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns4__ParseKeywords::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons4__KeywordType(soap, &this->_ns4__ParseKeywords::Keyword);
	/* transient soap skipped */
}

void _ns4__ParseKeywords::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons4__KeywordType(soap, &this->_ns4__ParseKeywords::Keyword);
#endif
}

int _ns4__ParseKeywords::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns4__ParseKeywords(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__ParseKeywords(struct soap *soap, const char *tag, int id, const _ns4__ParseKeywords *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns4__ParseKeywords), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons4__KeywordType(soap, "ns4:Keyword", -1, &a->_ns4__ParseKeywords::Keyword, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns4__ParseKeywords::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns4__ParseKeywords(soap, tag, this, type);
}

SOAP_FMAC3 _ns4__ParseKeywords * SOAP_FMAC4 soap_in__ns4__ParseKeywords(struct soap *soap, const char *tag, _ns4__ParseKeywords *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns4__ParseKeywords *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns4__ParseKeywords, sizeof(_ns4__ParseKeywords), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns4__ParseKeywords)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns4__ParseKeywords *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons4__KeywordType(soap, "ns4:Keyword", &a->_ns4__ParseKeywords::Keyword, "ns4:KeywordType"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->_ns4__ParseKeywords::Keyword.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns4__ParseKeywords *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns4__ParseKeywords, SOAP_TYPE__ns4__ParseKeywords, sizeof(_ns4__ParseKeywords), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns4__ParseKeywords * SOAP_FMAC2 soap_instantiate__ns4__ParseKeywords(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns4__ParseKeywords(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns4__ParseKeywords *p;
	size_t k = sizeof(_ns4__ParseKeywords);
	if (n < 0)
	{	p = SOAP_NEW(_ns4__ParseKeywords);
		if (p)
			((_ns4__ParseKeywords*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns4__ParseKeywords, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns4__ParseKeywords*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns4__ParseKeywords location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns4__ParseKeywords, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns4__ParseKeywords::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns4__ParseKeywords(soap, tag ? tag : "ns4:ParseKeywords", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns4__ParseKeywords::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns4__ParseKeywords(soap, this, tag, type);
}

SOAP_FMAC3 _ns4__ParseKeywords * SOAP_FMAC4 soap_get__ns4__ParseKeywords(struct soap *soap, _ns4__ParseKeywords *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns4__ParseKeywords(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__KeywordType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns1__String100Type(soap, &this->ns4__KeywordType::__item);
	/* transient soap skipped */
}

void ns4__KeywordType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns1__String100Type(soap, &this->ns4__KeywordType::__item);
#endif
}

int ns4__KeywordType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__KeywordType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__KeywordType(struct soap *soap, const char *tag, int id, const ns4__KeywordType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns1__String100Type(soap, tag, id, &a->ns4__KeywordType::__item, "");
}

void *ns4__KeywordType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__KeywordType(soap, tag, this, type);
}

SOAP_FMAC3 ns4__KeywordType * SOAP_FMAC4 soap_in_ns4__KeywordType(struct soap *soap, const char *tag, ns4__KeywordType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns4__KeywordType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__KeywordType, sizeof(ns4__KeywordType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns4__KeywordType)
		return (ns4__KeywordType *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns1__String100Type(soap, tag, &a->ns4__KeywordType::__item, "ns4:KeywordType"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns4__KeywordType * SOAP_FMAC2 soap_instantiate_ns4__KeywordType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__KeywordType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns4__KeywordType *p;
	size_t k = sizeof(ns4__KeywordType);
	if (n < 0)
	{	p = SOAP_NEW(ns4__KeywordType);
		if (p)
			((ns4__KeywordType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns4__KeywordType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns4__KeywordType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns4__KeywordType location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns4__KeywordType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns4__KeywordType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns4__KeywordType(soap, tag ? tag : "ns4:KeywordType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__KeywordType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__KeywordType(soap, this, tag, type);
}

SOAP_FMAC3 ns4__KeywordType * SOAP_FMAC4 soap_get_ns4__KeywordType(struct soap *soap, ns4__KeywordType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__KeywordType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns3__MessageInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__MessageInfo::EnvelopeID = NULL;
	this->_ns3__MessageInfo::RefEnvelopeID = NULL;
	this->_ns3__MessageInfo::MessageCode = NULL;
	/* transient soap skipped */
}

void _ns3__MessageInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__EnvelopeIDType(soap, &this->_ns3__MessageInfo::EnvelopeID);
	soap_serialize_PointerTons1__EnvelopeIDType(soap, &this->_ns3__MessageInfo::RefEnvelopeID);
	soap_serialize_PointerTons1__MessageCodeType(soap, &this->_ns3__MessageInfo::MessageCode);
#endif
}

int _ns3__MessageInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__MessageInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__MessageInfo(struct soap *soap, const char *tag, int id, const _ns3__MessageInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__MessageInfo), type))
		return soap->error;
	if (!a->_ns3__MessageInfo::EnvelopeID)
	{	if (soap_element_empty(soap, "ns3:EnvelopeID"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__EnvelopeIDType(soap, "ns3:EnvelopeID", -1, &a->_ns3__MessageInfo::EnvelopeID, ""))
		return soap->error;
	if (!a->_ns3__MessageInfo::RefEnvelopeID)
	{	if (soap_element_nil(soap, "ns3:RefEnvelopeID"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__EnvelopeIDType(soap, "ns3:RefEnvelopeID", -1, &a->_ns3__MessageInfo::RefEnvelopeID, ""))
		return soap->error;
	if (!a->_ns3__MessageInfo::MessageCode)
	{	if (soap_element_empty(soap, "ns3:MessageCode"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__MessageCodeType(soap, "ns3:MessageCode", -1, &a->_ns3__MessageInfo::MessageCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns3__MessageInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__MessageInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__MessageInfo * SOAP_FMAC4 soap_in__ns3__MessageInfo(struct soap *soap, const char *tag, _ns3__MessageInfo *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__MessageInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__MessageInfo, sizeof(_ns3__MessageInfo), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns3__MessageInfo)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns3__MessageInfo *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_EnvelopeID1 = 1;
	size_t soap_flag_RefEnvelopeID1 = 1;
	size_t soap_flag_MessageCode1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EnvelopeID1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__EnvelopeIDType(soap, "ns3:EnvelopeID", &a->_ns3__MessageInfo::EnvelopeID, "ns1:EnvelopeIDType"))
				{	soap_flag_EnvelopeID1--;
					continue;
				}
			}
			if (soap_flag_RefEnvelopeID1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__EnvelopeIDType(soap, "ns3:RefEnvelopeID", &a->_ns3__MessageInfo::RefEnvelopeID, "ns1:EnvelopeIDType"))
				{	soap_flag_RefEnvelopeID1--;
					continue;
				}
			}
			if (soap_flag_MessageCode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__MessageCodeType(soap, "ns3:MessageCode", &a->_ns3__MessageInfo::MessageCode, "ns1:MessageCodeType"))
				{	soap_flag_MessageCode1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_ns3__MessageInfo::EnvelopeID || soap_flag_RefEnvelopeID1 > 0 || !a->_ns3__MessageInfo::MessageCode))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns3__MessageInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__MessageInfo, SOAP_TYPE__ns3__MessageInfo, sizeof(_ns3__MessageInfo), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns3__MessageInfo * SOAP_FMAC2 soap_instantiate__ns3__MessageInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__MessageInfo(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns3__MessageInfo *p;
	size_t k = sizeof(_ns3__MessageInfo);
	if (n < 0)
	{	p = SOAP_NEW(_ns3__MessageInfo);
		if (p)
			((_ns3__MessageInfo*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns3__MessageInfo, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns3__MessageInfo*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns3__MessageInfo location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns3__MessageInfo, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns3__MessageInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns3__MessageInfo(soap, tag ? tag : "ns3:MessageInfo", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__MessageInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__MessageInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__MessageInfo * SOAP_FMAC4 soap_get__ns3__MessageInfo(struct soap *soap, _ns3__MessageInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__MessageInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns2__Envelope::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_SOAP_ENV__HeaderType(soap, &this->_ns2__Envelope::Header);
	soap_default_SOAP_ENV__BodyType(soap, &this->_ns2__Envelope::Body);
	/* transient soap skipped */
}

void _ns2__Envelope::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_SOAP_ENV__HeaderType(soap, &this->_ns2__Envelope::Header);
	soap_serialize_SOAP_ENV__BodyType(soap, &this->_ns2__Envelope::Body);
#endif
}

int _ns2__Envelope::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns2__Envelope(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__Envelope(struct soap *soap, const char *tag, int id, const _ns2__Envelope *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns2__Envelope), type))
		return soap->error;
	if (soap_out_SOAP_ENV__HeaderType(soap, "Header", -1, &a->_ns2__Envelope::Header, ""))
		return soap->error;
	if (soap_out_SOAP_ENV__BodyType(soap, "Body", -1, &a->_ns2__Envelope::Body, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns2__Envelope::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns2__Envelope(soap, tag, this, type);
}

SOAP_FMAC3 _ns2__Envelope * SOAP_FMAC4 soap_in__ns2__Envelope(struct soap *soap, const char *tag, _ns2__Envelope *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns2__Envelope *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns2__Envelope, sizeof(_ns2__Envelope), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns2__Envelope)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns2__Envelope *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Header1 = 1;
	size_t soap_flag_Body1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Header1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_SOAP_ENV__HeaderType(soap, "Header", &a->_ns2__Envelope::Header, ""))
				{	soap_flag_Header1--;
					continue;
				}
			}
			if (soap_flag_Body1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_SOAP_ENV__BodyType(soap, "Body", &a->_ns2__Envelope::Body, ""))
				{	soap_flag_Body1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Header1 > 0 || soap_flag_Body1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns2__Envelope *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns2__Envelope, SOAP_TYPE__ns2__Envelope, sizeof(_ns2__Envelope), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns2__Envelope * SOAP_FMAC2 soap_instantiate__ns2__Envelope(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns2__Envelope(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns2__Envelope *p;
	size_t k = sizeof(_ns2__Envelope);
	if (n < 0)
	{	p = SOAP_NEW(_ns2__Envelope);
		if (p)
			((_ns2__Envelope*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns2__Envelope, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_ns2__Envelope*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns2__Envelope location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns2__Envelope, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns2__Envelope::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns2__Envelope(soap, tag ? tag : "ns2:Envelope", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns2__Envelope::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns2__Envelope(soap, this, tag, type);
}

SOAP_FMAC3 _ns2__Envelope * SOAP_FMAC4 soap_get__ns2__Envelope(struct soap *soap, _ns2__Envelope *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns2__Envelope(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__BodyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOf_XML(soap, &this->ns2__BodyType::__any);
	/* transient soap skipped */
}

void ns2__BodyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->ns2__BodyType::__any);
#endif
}

int ns2__BodyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__BodyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__BodyType(struct soap *soap, const char *tag, int id, const ns2__BodyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__BodyType), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &a->ns2__BodyType::__any, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__BodyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__BodyType(soap, tag, this, type);
}

SOAP_FMAC3 ns2__BodyType * SOAP_FMAC4 soap_in_ns2__BodyType(struct soap *soap, const char *tag, ns2__BodyType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__BodyType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__BodyType, sizeof(ns2__BodyType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns2__BodyType)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns2__BodyType *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &a->ns2__BodyType::__any, ""))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns2__BodyType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__BodyType, SOAP_TYPE_ns2__BodyType, sizeof(ns2__BodyType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns2__BodyType * SOAP_FMAC2 soap_instantiate_ns2__BodyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__BodyType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns2__BodyType *p;
	size_t k = sizeof(ns2__BodyType);
	if (n < 0)
	{	p = SOAP_NEW(ns2__BodyType);
		if (p)
			((ns2__BodyType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns2__BodyType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns2__BodyType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns2__BodyType location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__BodyType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns2__BodyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns2__BodyType(soap, tag ? tag : "ns2:BodyType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__BodyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__BodyType(soap, this, tag, type);
}

SOAP_FMAC3 ns2__BodyType * SOAP_FMAC4 soap_get_ns2__BodyType(struct soap *soap, ns2__BodyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__BodyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__HeaderType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns2__HeaderType::ns3__MessageInfo = NULL;
	/* transient soap skipped */
}

void ns2__HeaderType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns3__MessageInfo(soap, &this->ns2__HeaderType::ns3__MessageInfo);
#endif
}

int ns2__HeaderType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__HeaderType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HeaderType(struct soap *soap, const char *tag, int id, const ns2__HeaderType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__HeaderType), type))
		return soap->error;
	if (!a->ns2__HeaderType::ns3__MessageInfo)
	{	if (soap_element_empty(soap, "ns3:MessageInfo"))
			return soap->error;
	}
	else
	if (soap_out_PointerTo_ns3__MessageInfo(soap, "ns3:MessageInfo", -1, &a->ns2__HeaderType::ns3__MessageInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__HeaderType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns2__HeaderType(soap, tag, this, type);
}

SOAP_FMAC3 ns2__HeaderType * SOAP_FMAC4 soap_in_ns2__HeaderType(struct soap *soap, const char *tag, ns2__HeaderType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__HeaderType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__HeaderType, sizeof(ns2__HeaderType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns2__HeaderType)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns2__HeaderType *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ns3__MessageInfo1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__MessageInfo1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns3__MessageInfo(soap, "ns3:MessageInfo", &a->ns2__HeaderType::ns3__MessageInfo, ""))
				{	soap_flag_ns3__MessageInfo1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->ns2__HeaderType::ns3__MessageInfo))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns2__HeaderType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__HeaderType, SOAP_TYPE_ns2__HeaderType, sizeof(ns2__HeaderType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns2__HeaderType * SOAP_FMAC2 soap_instantiate_ns2__HeaderType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__HeaderType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns2__HeaderType *p;
	size_t k = sizeof(ns2__HeaderType);
	if (n < 0)
	{	p = SOAP_NEW(ns2__HeaderType);
		if (p)
			((ns2__HeaderType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns2__HeaderType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns2__HeaderType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns2__HeaderType location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns2__HeaderType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns2__HeaderType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns2__HeaderType(soap, tag ? tag : "ns2:HeaderType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__HeaderType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__HeaderType(soap, this, tag, type);
}

SOAP_FMAC3 ns2__HeaderType * SOAP_FMAC4 soap_get_ns2__HeaderType(struct soap *soap, ns2__HeaderType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__HeaderType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__MessageCodeType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns1__String10Min10Type(soap, &this->ns1__MessageCodeType::__item);
	/* transient soap skipped */
}

void ns1__MessageCodeType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns1__String10Min10Type(soap, &this->ns1__MessageCodeType::__item);
#endif
}

int ns1__MessageCodeType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__MessageCodeType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MessageCodeType(struct soap *soap, const char *tag, int id, const ns1__MessageCodeType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns1__String10Min10Type(soap, tag, id, &a->ns1__MessageCodeType::__item, "");
}

void *ns1__MessageCodeType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__MessageCodeType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__MessageCodeType * SOAP_FMAC4 soap_in_ns1__MessageCodeType(struct soap *soap, const char *tag, ns1__MessageCodeType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__MessageCodeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MessageCodeType, sizeof(ns1__MessageCodeType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__MessageCodeType)
		return (ns1__MessageCodeType *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns1__String10Min10Type(soap, tag, &a->ns1__MessageCodeType::__item, "ns1:MessageCodeType"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__MessageCodeType * SOAP_FMAC2 soap_instantiate_ns1__MessageCodeType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MessageCodeType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__MessageCodeType *p;
	size_t k = sizeof(ns1__MessageCodeType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__MessageCodeType);
		if (p)
			((ns1__MessageCodeType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__MessageCodeType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__MessageCodeType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__MessageCodeType location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__MessageCodeType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__MessageCodeType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__MessageCodeType(soap, tag ? tag : "ns1:MessageCodeType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__MessageCodeType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__MessageCodeType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__MessageCodeType * SOAP_FMAC4 soap_get_ns1__MessageCodeType(struct soap *soap, ns1__MessageCodeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MessageCodeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__EnvelopeIDType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns1__StringUp32Min32Type(soap, &this->ns1__EnvelopeIDType::__item);
	/* transient soap skipped */
}

void ns1__EnvelopeIDType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_ns1__StringUp32Min32Type(soap, &this->ns1__EnvelopeIDType::__item);
#endif
}

int ns1__EnvelopeIDType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__EnvelopeIDType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EnvelopeIDType(struct soap *soap, const char *tag, int id, const ns1__EnvelopeIDType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ns1__StringUp32Min32Type(soap, tag, id, &a->ns1__EnvelopeIDType::__item, "");
}

void *ns1__EnvelopeIDType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__EnvelopeIDType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__EnvelopeIDType * SOAP_FMAC4 soap_in_ns1__EnvelopeIDType(struct soap *soap, const char *tag, ns1__EnvelopeIDType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns1__EnvelopeIDType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EnvelopeIDType, sizeof(ns1__EnvelopeIDType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__EnvelopeIDType)
		return (ns1__EnvelopeIDType *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ns1__StringUp32Min32Type(soap, tag, &a->ns1__EnvelopeIDType::__item, "ns1:EnvelopeIDType"))
		return NULL;
	return a;
}

SOAP_FMAC1 ns1__EnvelopeIDType * SOAP_FMAC2 soap_instantiate_ns1__EnvelopeIDType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__EnvelopeIDType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__EnvelopeIDType *p;
	size_t k = sizeof(ns1__EnvelopeIDType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__EnvelopeIDType);
		if (p)
			((ns1__EnvelopeIDType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__EnvelopeIDType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__EnvelopeIDType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__EnvelopeIDType location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__EnvelopeIDType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__EnvelopeIDType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__EnvelopeIDType(soap, tag ? tag : "ns1:EnvelopeIDType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__EnvelopeIDType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__EnvelopeIDType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__EnvelopeIDType * SOAP_FMAC4 soap_get_ns1__EnvelopeIDType(struct soap *soap, ns1__EnvelopeIDType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EnvelopeIDType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__HeaderType(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__HeaderType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_SOAP_ENV__HeaderType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_SOAP_ENV__HeaderType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_SOAP_ENV__HeaderType, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_SOAP_ENV__HeaderType, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_SOAP_ENV__HeaderType, SOAP_TYPE_SOAP_ENV__HeaderType, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__HeaderType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__HeaderType(soap, tag ? tag : "SOAP-ENV:HeaderType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_SOAP_ENV__HeaderType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__HeaderType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__BodyType(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__BodyType(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_SOAP_ENV__BodyType), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_SOAP_ENV__BodyType(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_SOAP_ENV__BodyType, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_SOAP_ENV__BodyType, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_SOAP_ENV__BodyType, SOAP_TYPE_SOAP_ENV__BodyType, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__BodyType(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__BodyType(soap, tag ? tag : "SOAP-ENV:BodyType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_SOAP_ENV__BodyType(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__BodyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	if (n < 0)
	{	p = SOAP_NEW(std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_std__string, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__KeywordType(struct soap *soap, ns4__KeywordType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__KeywordType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__KeywordType(struct soap *soap, const char *tag, int id, ns4__KeywordType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__KeywordType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns4__KeywordType ? type : NULL);
}

SOAP_FMAC3 ns4__KeywordType ** SOAP_FMAC4 soap_in_PointerTons4__KeywordType(struct soap *soap, const char *tag, ns4__KeywordType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__KeywordType **)soap_malloc(soap, sizeof(ns4__KeywordType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__KeywordType *)soap_instantiate_ns4__KeywordType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns4__KeywordType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__KeywordType, sizeof(ns4__KeywordType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__KeywordType(struct soap *soap, ns4__KeywordType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons4__KeywordType(soap, tag ? tag : "ns4:KeywordType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__KeywordType ** SOAP_FMAC4 soap_get_PointerTons4__KeywordType(struct soap *soap, ns4__KeywordType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__KeywordType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MessageCodeType(struct soap *soap, ns1__MessageCodeType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__MessageCodeType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MessageCodeType(struct soap *soap, const char *tag, int id, ns1__MessageCodeType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__MessageCodeType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__MessageCodeType ? type : NULL);
}

SOAP_FMAC3 ns1__MessageCodeType ** SOAP_FMAC4 soap_in_PointerTons1__MessageCodeType(struct soap *soap, const char *tag, ns1__MessageCodeType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__MessageCodeType **)soap_malloc(soap, sizeof(ns1__MessageCodeType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__MessageCodeType *)soap_instantiate_ns1__MessageCodeType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__MessageCodeType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__MessageCodeType, sizeof(ns1__MessageCodeType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MessageCodeType(struct soap *soap, ns1__MessageCodeType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__MessageCodeType(soap, tag ? tag : "ns1:MessageCodeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__MessageCodeType ** SOAP_FMAC4 soap_get_PointerTons1__MessageCodeType(struct soap *soap, ns1__MessageCodeType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__MessageCodeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EnvelopeIDType(struct soap *soap, ns1__EnvelopeIDType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__EnvelopeIDType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EnvelopeIDType(struct soap *soap, const char *tag, int id, ns1__EnvelopeIDType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__EnvelopeIDType, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__EnvelopeIDType ? type : NULL);
}

SOAP_FMAC3 ns1__EnvelopeIDType ** SOAP_FMAC4 soap_in_PointerTons1__EnvelopeIDType(struct soap *soap, const char *tag, ns1__EnvelopeIDType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__EnvelopeIDType **)soap_malloc(soap, sizeof(ns1__EnvelopeIDType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__EnvelopeIDType *)soap_instantiate_ns1__EnvelopeIDType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__EnvelopeIDType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__EnvelopeIDType, sizeof(ns1__EnvelopeIDType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EnvelopeIDType(struct soap *soap, ns1__EnvelopeIDType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__EnvelopeIDType(soap, tag ? tag : "ns1:EnvelopeIDType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__EnvelopeIDType ** SOAP_FMAC4 soap_get_PointerTons1__EnvelopeIDType(struct soap *soap, ns1__EnvelopeIDType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__EnvelopeIDType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__MessageInfo(struct soap *soap, _ns3__MessageInfo *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__MessageInfo))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__MessageInfo(struct soap *soap, const char *tag, int id, _ns3__MessageInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__MessageInfo, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns3__MessageInfo ? type : NULL);
}

SOAP_FMAC3 _ns3__MessageInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__MessageInfo(struct soap *soap, const char *tag, _ns3__MessageInfo **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__MessageInfo **)soap_malloc(soap, sizeof(_ns3__MessageInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__MessageInfo *)soap_instantiate__ns3__MessageInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns3__MessageInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__MessageInfo, sizeof(_ns3__MessageInfo), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__MessageInfo(struct soap *soap, _ns3__MessageInfo *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns3__MessageInfo(soap, tag ? tag : "ns3:MessageInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__MessageInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__MessageInfo(struct soap *soap, _ns3__MessageInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__MessageInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__KeywordType(struct soap *soap, std::vector<ns4__KeywordType *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__KeywordType(struct soap *soap, const std::vector<ns4__KeywordType *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns4__KeywordType *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons4__KeywordType(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__KeywordType(struct soap *soap, const char *tag, int id, const std::vector<ns4__KeywordType *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns4__KeywordType *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons4__KeywordType(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns4__KeywordType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__KeywordType(struct soap *soap, const char *tag, std::vector<ns4__KeywordType *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons4__KeywordType(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns4__KeywordType *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns4__KeywordType, SOAP_TYPE_std__vectorTemplateOfPointerTons4__KeywordType, sizeof(ns4__KeywordType), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons4__KeywordType(soap, tag, NULL, "ns4:KeywordType"))
				break;
		}
		else
		{	if (!soap_in_PointerTons4__KeywordType(soap, tag, &n, "ns4:KeywordType"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns4__KeywordType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__KeywordType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons4__KeywordType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns4__KeywordType *> *p;
	size_t k = sizeof(std::vector<ns4__KeywordType *> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<ns4__KeywordType *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<ns4__KeywordType *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns4__KeywordType *>  location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_std__vectorTemplateOfPointerTons4__KeywordType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap *soap, const std::vector<char *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, int id, const std::vector<char *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<char *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_outliteral(soap, tag, (char*const*)&(*i), NULL))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, std::vector<char *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOf_XML(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		char *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE__XML, SOAP_TYPE_std__vectorTemplateOf_XML, sizeof(char *), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_inliteral(soap, tag, NULL))
				break;
		}
		else
		{	if (!soap_inliteral(soap, tag, &n))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_XML(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<char *> *p;
	size_t k = sizeof(std::vector<char *> );
	if (n < 0)
	{	p = SOAP_NEW(std::vector<char *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(std::vector<char *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<char *>  location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_std__vectorTemplateOf_XML, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
